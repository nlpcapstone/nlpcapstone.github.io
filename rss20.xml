<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
	<title>NLP Capstone Spring 2018</title>
	<link>https://nlpcapstone.github.io/</link>
	<language>en</language>
	<description>NLP Capstone Spring 2018 - https://nlpcapstone.github.io/</description>
	<atom:link rel="self" href="https://nlpcapstone.github.io/rss20.xml" type="application/rss+xml"/>

<item>
	<title>Kuikui Liu, Nicholas Ruhland &lt;br/&gt; Team INLP: NLP Capstone Post #8: Training challenges</title>
	<guid isPermaLink="false">http://mathstoc.wordpress.com/?p=339</guid>
	<link>https://mathstoc.wordpress.com/2018/05/17/nlp-capstone-post-8-training-challenges/</link>
	<description>&lt;h1&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Challenges with training TSL model&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In our previous post we proposed a three-model system that would allow us to take advantage of a larger corpus of higher quality lyrics data for the production of lyrics. We also finally tackle the alignment task with a simple approach of determining whether a lyric token should be produced at each timestep. This seems sensible since we have begun dividing the MIDIs into pianorolls with a constant frequency.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Unfortunately, even after several bugs bashed, we’ve been still unable to produce even sensible timings. We find the RNN collapses to repeatedly generating 0 (for no lyric event), even though a randomly initialized RNN will repeatedly generate 1 (and perform better with respect to classification accuracy).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Future direction&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If we are able to produce something reasonable from our existing architecture, we would like to move on to a second model that structures the problem as machine translation. We have decided to focus on the paper Attention is All You Need by Vaswani et al. [1] for our presentation in two weeks. The structure of our problem is straightforward to apply to translation as converting pianoroll format into english sentences. Incorporating attention has shown promising results in the literature, though that is no guarantee that our noisy dataset would be able to take advantage of this proposed architecture.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;References&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;[1] &lt;/span&gt;&lt;a href=&quot;https://arxiv.org/abs/1706.03762&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;https://arxiv.org/abs/1706.03762&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 17 May 2018 05:55:03 +0000</pubDate>
</item>
<item>
	<title>Kuikui Liu, Nicholas Ruhland &lt;br/&gt; Team INLP: NLP Capstone Post #7: TSL Pipeline</title>
	<guid isPermaLink="false">http://mathstoc.wordpress.com/?p=335</guid>
	<link>https://mathstoc.wordpress.com/2018/05/10/nlp-capstone-post-7-tsl-pipeline/</link>
	<description>&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Modeling issues&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As seen in our results last week, the RNN architecture we have been training has not been able to produce any coherent series of tokens based on the music data provided in the clean Lakh dataset. To analyze the poor results of this model, we have considered various features of the quality of the data. To simplify the issue of timing the lyric tokens, this model attempts to predict a lyric token at every timestep. Between each token we have summed all the musical data, producing a piano roll that looks approximately like the following image.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screen Shot 2018-05-09 at 4.31.53 PM&quot; class=&quot;  wp-image-331 aligncenter&quot; height=&quot;303&quot; src=&quot;https://mathstoc.files.wordpress.com/2018/05/screen-shot-2018-05-09-at-4-31-53-pm.png?w=501&amp;amp;h=303&quot; width=&quot;501&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In the event that two lyrics occur at exactly the same time step, we end up with a gap in the notes, here highlighted in red.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screen Shot 2018-05-09 at 4.31.53 PM&quot; class=&quot;  wp-image-334 aligncenter&quot; height=&quot;302&quot; src=&quot;https://mathstoc.files.wordpress.com/2018/05/screen-shot-2018-05-09-at-4-31-53-pm1.png?w=500&amp;amp;h=302&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At first we expected this problem to occur in only a small number of cases, but it is often the result of the newline character appearing in a message simultaneously with the first lyric of the next sentence. This processing poses several problems to the task of learning the lyrical content based on the structure of the music. First, the large number of musical gaps may be confounding the model due to the large variety in lyrics that will be seen at those time steps. Additionally, we lose all information about the song timing since all regions without lyrics are compressed into a single time step. In theory, gaps in lyrics could hint to the model that the next section should start a new verse or chorus.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The TSL Pipeline&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As suggested in the previous blogpost, we would like to be able to augment the results of the musical model with a higher quality lyrical dataset. The Kaggle lyrics dataset has shown promising results in previous blogposts at the quality of the lyric sequences it has been able to produce.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The TSL Pipeline is a combination of three models: Timing, Seed, and Lyrics. The architecture may look something like the following diagram:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Training&quot; class=&quot;  wp-image-333 aligncenter&quot; height=&quot;221&quot; src=&quot;https://mathstoc.files.wordpress.com/2018/05/training.png?w=531&amp;amp;h=221&quot; width=&quot;531&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;During training, each pianoroll will be separated into data representing the timing, notes and lyrics. These get passed into respective models to learn timing and “seed” information. Additional lyrics information from the Kaggle dataset is used to train a lyrical model.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Evaluation&quot; class=&quot;  wp-image-332 aligncenter&quot; height=&quot;220&quot; src=&quot;https://mathstoc.files.wordpress.com/2018/05/evaluation.png?w=538&amp;amp;h=220&quot; width=&quot;538&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At evaluation time, the lyrics from the original pianoroll are not passed into the Seed model. Instead, the Seed model attempts to predict some seed based on the musical content, and will pass its result into the lyrics model. The combination of these lyrics and timing information constitute the complete description of our karaoke output.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Timing Model&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In all previous posts we ignored the issue of lyrics timing in the interest of creating a reasonable lyrical model. Our current timing model is similar to our previous model attempt, but the data is generated differently. Instead of computing a pianoroll sample at each lyrical timestep, we us a constant sampling frequency of 10 timesteps per second. We then annotate each timestep with a 1 or 0 based on if a lyric was annotated at that step. The model will then attempt to predict for each step of a given pianoroll the probability there should be a lyric at that time.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Seed Model&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The seed model will be a simplified version of the poorly performing model from before. Instead of predicting all lyrics, it will attempt to predict a small subset of the initial lyrics. This would also allow us to create a dataset with more training examples by splitting each song into smaller samples.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Lyrics Model&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The lyrics model will be similar to the one described in the second blog post, which is a character level RNN for generating lyrics. This will take the first few words predicted by the seed model and generate the remainder of the lyrics. Since it’s trained on the large Kaggle dataset the quality seems to be much higher than what our MIDI training has produced.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;As of this blog post, we are still testing various hyperparameters and waiting for models to converge.  Additional results will follow once we can examine the various output.&lt;/p&gt;</description>
	<pubDate>Thu, 10 May 2018 06:56:01 +0000</pubDate>
</item>
<item>
	<title>Ananth Gottumukkala &lt;br/&gt; Team Turing Test: Advanced Model Attempt 1 (Part 2)</title>
	<guid isPermaLink="false">http://deeplearningturingtest.wordpress.com/?p=23</guid>
	<link>https://deeplearningturingtest.wordpress.com/2018/05/09/advanced-model-attempt-1-part-2/</link>
	<description>&lt;p&gt;This week I completely finished the model end-to-end and programmed the rules of the dialogue/game. The input to the model is created as follows: the user response is broken up into individual words and converted into a matrix of word embeddings. That matrix is run through a CNN before being fed into the LSTM and finally the policy networks to compute the Q values for user actions (questions to the user) and hypothesis actions (updates to the database). The model I created closely follows the one in this paper: &lt;a href=&quot;https://arxiv.org/abs/1606.02560&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1606.02560&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was able to run the simulation on my computer and debug a few issues with the model before starting the actual training session. Furthermore, I moved the model to Azure, set up the SQL database on the remote computer, and am currently running the simulation on tensorflow-gpu.&lt;/p&gt;
&lt;p&gt;The initial results are not too great but somewhat promising. The model assigns +30 reward for winning, -30 for losing, -5 for bad guesses and +1 if it correctly understands the user response and performs the right action on the database. My model started out with an average of -30 reward for an entire game (it almost never took the same action that the user said and then abruptly lost) and after about 100,000 time steps that average has decreased to -23. This tells me the model is eventually learning how to understand the user responses but the convergence is still a lot slower than I expected.&lt;/p&gt;
&lt;p&gt;As a side note, while it seems silly to try classifying user responses into buckets like ‘Yes’, ‘No’, ‘Unknown’ instead of training a separate classifier, the goal is to build a model that can be generalized to more complex dialogue types where there are more nuanced actions that heavily depend on dialogue state, not just the current user response.&lt;/p&gt;
&lt;p&gt;The main difference between my model and the model in the paper (barring any bugs I am unaware of) is how the user response is represented. In both models, the model tries to combine NLU and dialog state tracking into one end-to-end model and the user response sentence representation is crucial in determining the dialogue state at any given time step. The paper creates a very short bag of bigrams feature vector (of about 30 features) from the sentence whereas I create glove vectors (embedding dimension = 50) for each word and run them through a CNN to get an output of 250-300 features.&lt;/p&gt;
&lt;p&gt;The paper made it sound like they got the model to converge and play the game well after about 120000 time steps. To play the game well, the model needs to correctly understand what action should be done on the database based on the user response. My guess is their model converges much faster and can learn to make the right action much faster than mine because of their simpler state representation. Once the model learns how to correctly interpret the user response, it becomes much easier to learn how to win from any given dialogue state. This allows the model to generalize to people it hasn’t seen because the model only learns what actions to take based on the dialogue state, not on the attributes of any given person.&lt;/p&gt;
&lt;p&gt;My goal for next week is to try tuning my model to converge faster. My main plan will be to shorten and simplify the state representation to be more like the paper’s (although it will still be different since the paper used utterance embeddings for speech, not word embeddings). If the model somehow works well after tuning, I will look into trying to train the model on more complex user responses where the set of actions to take are more qualitative than yes and no.&lt;/p&gt;</description>
	<pubDate>Wed, 09 May 2018 06:58:16 +0000</pubDate>
</item>
<item>
	<title>Sarah Yu &lt;br/&gt; Team Jekyll-Hyde: Advanced Model Attempt #1 (Act 2 Scene 1)</title>
	<guid isPermaLink="true">http://sarahyu.weebly.com/cse-481n/advanced-model-attempt-1-part-21</guid>
	<link>http://sarahyu.weebly.com/cse-481n/advanced-model-attempt-1-part-21</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt;This week, I had to do a little backtracking and restructuring, but all for the better! &lt;ul&gt;&lt;li&gt;More Data! I have had a couple jobs still running that has allowed me to have more reddit data to work with overall, which is especially good news for the next advanced model&lt;/li&gt;&lt;li&gt;Subreddit ReOrg - A large portion of this week has been on identifying different subsets for the neurodivergent and neurotypical groups. In conversation with Maarten, we discussed that the subreddits in the current state are a bit too broad to address the hypotheses and may not produce a focused language model that makes sense. Currently, the neurodivergent group is a broad strokes grouping of all types of differences. With that in mind, I spent some time researching, following some Reddit rabbit holes, and learning about ICD 10 &lt;font color=&quot;#515151&quot;&gt;(International Statistical Classification of Diseases and Related Health Problems (ICD), a medical classification list by the World Health Organization (WHO)) to classify the subreddits and the mental illnesses they speak to. Among these topics, we specifically wanted to look at the the two 'Blocks' - Mood (affective) disorders and Neurotic, Stress-Related and Somatoform disorders. This would be defined as the new 28 subreddits constituting the neurodivergent set, and the 22 neurotypical subreddits are those that are general advice, community support, or discussions on mental health, broadly speaking. These were chosen from the initial ND set because while some of them discussed mental health and neurodiversity, they were open to more than just users dealing with mental health related issues. They had similar types of posts where people are more open and discussing in detail their personal lives, a kind of venting space. And choosing from this group rather than to look at more general reddit, was a decision made so that I could find the nuances rather than the more general difference seen in discussing psychology and not. Despite the significant reduction of subreddits (from 126 to 28 ND and 100 to 22 NT), the data collection I mentioned above has resulted in 5x the original vocabulary size and we now have a combined 1 million words in the newest set (being added to as we speak)&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;With that, I was able to run the previous vennclouds and idp models (and Act 2 Scene 2, before next week will hopefully include the Connotation Frames model results). For the vennclouds, I think we see some similarity from before of the &quot;my/me/I&quot; terms speaking in first person, but the NT posts has more discussion of a second person or a more general reference to an other or friends. It might also be useful to find a list of prepositional phrases to remove and to find something more interesting in the venn diagram middle portion. &lt;/div&gt;  &lt;div&gt;&lt;div class=&quot;wsite-image wsite-image-border-none &quot; style=&quot;padding-top: 10px; padding-bottom: 10px; margin-left: 0; margin-right: 0; text-align: center;&quot;&gt; &lt;a&gt; &lt;img alt=&quot;Picture&quot; src=&quot;http://sarahyu.weebly.com/uploads/2/4/3/0/24307463/screen-shot-2018-05-09-at-2-32-31-am_orig.png&quot; style=&quot;width: auto;&quot; /&gt; &lt;/a&gt; &lt;div style=&quot;display: block; font-size: 90%;&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;paragraph&quot;&gt;&lt;br /&gt;I also ran the IDP model from before and found the following top categories:&lt;br /&gt;&lt;strong&gt;ND&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;I/&lt;span&gt;my/&lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;em&gt;me/myself&lt;/em&gt; - the personal discussion makes sense, but I'm a bit curious as to why it would be more prevalent than in the other discussion forums that are also predominantly venting spaces focused on the self seeking the community. &lt;/span&gt;&lt;br /&gt;&lt;em&gt;anxiety/depression/OCD&lt;/em&gt; - these are the subreddit categories we basically chose&lt;br /&gt;&lt;em&gt;feel/feeling &lt;/em&gt;- I was surprised to see a significantly higher mention of feeling in the ND categories despite the other subreddits still being communities discussing mental illness along with the larger public in discussing general problems &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;NT&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;you / his/he/him / girls/she/her - &lt;/em&gt;This is a bit surprising given that I had made a bit of a fuss around the female mentions being significantly higher in the ND categories. I'm interested to see what this shift might mean, but even more so, I think the discussion of another is an interesting contrast between the two that might be better suited for the connotation frames results that I hope to do in the next couple of days. &lt;br /&gt;&lt;em&gt;https&lt;/em&gt; - links are back! But more interestingly, while they were prevalent in the original NT group, which we hypothesized were due to the higher proportion of anecdotal advice in the ND categories, it seems that even in regards to discussions around mental illness, people bring in outside links and whatnot to advise, or uplift other users. &lt;br /&gt;&lt;br /&gt;Next Steps: As I mentioned above, I'd like to run this same new and larger dataset with the connotation frames model. Beyond that, I'd like to spend the next two weeks working on either implementing a SAGE log-linear model to describe these language models, or a deep learning model. If possible, I hope to also get the graphical model going &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 08 May 2018 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Halden Lin &lt;br/&gt; Team undef.: NLP Capstone | 06: Uncertainty</title>
	<guid isPermaLink="false">https://medium.com/p/6f773ae418d0</guid>
	<link>https://medium.com/@halden.lin/nlp-capstone-06-uncertainty-6f773ae418d0?source=rss-2759d54493c0------2</link>
	<description>&lt;p&gt;previous posts: &lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-01-options-ee873b6885d5&quot;&gt;01&lt;/a&gt; &lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-02-getting-started-96fb908765f5&quot;&gt;02&lt;/a&gt; &lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-03-project-proposal-7d8e9ec1a8e3&quot;&gt;03&lt;/a&gt; &lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-04-first-steps-be87c31976b7&quot;&gt;04&lt;/a&gt; &lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-05-experimenting-306dca636d3a&quot;&gt;05&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I’ve begun to realize I may not be getting as much out of the project I chose I had hoped. My initial motivation for my project was a hope of expanding my knowledge and developing insights on the NLP front by leveraging the familiarity of Visualization. While I am certainly learning a lot by reading papers on Attention and Neural Networks as a whole (especially through my in-class paper presentation), I feel the work I am doing in building a tool for visualizing and debugging attention models may not be providing me the space to explore NLP that I had hoped for. While the tool will certainly &lt;strong&gt;enable &lt;/strong&gt;exploration, my concern is that this exploration will not occur until after the tool is completed at the end of the quarter.&lt;/p&gt;&lt;p&gt;The good news is that there have been two recent developments that, while increasing my uncertainty, offer potential for greater depth in exploration along the NLP front.&lt;/p&gt;&lt;h4&gt;1. Potential Pivot&lt;/h4&gt;&lt;p&gt;I voiced these concerns with Prof. Choi this past week and was given a good amount of valuable advice. Per her suggestion, the beginning of my last cycle began with three tasks.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Read &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=2470718&quot;&gt;&lt;em&gt;The Efficacy of Human Post-editing for Language Translation&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, &lt;/em&gt;authored by&lt;em&gt; &lt;/em&gt;Spence Green, Jeff Heer, and Christopher Manning. This paper is unique in that it presents the value of Visualization and HCI within Natural Language Processing, but not as a window into a model. Rather, the authors explore a specific task integral to the Language Translation pipeline and present suggestions for future work in improving Language Translation.&lt;/li&gt;&lt;li&gt;Do in-depth human error-analysis of existing summarization models. I used examples from See et al.’s paper &lt;em&gt;Get To The Point: Summarization with Pointer-Generator Networks &lt;/em&gt;(2017).This was helpful gaining a better intuition as to the problem space and the challenges currently posed by machine summarization.&lt;/li&gt;&lt;li&gt;Think about how summarization as a task, whether that be the development of models, the model’s task itself, or end-user tasks that use the model, can be re-framed in order to leverage Visualization. This was especially time consuming, as it was difficult for me, but it helped immensely in taking a step back to understand the purpose of these models. This, in turn, helped me understand how my work can fit into this purpose.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The next few days consisted largely of brainstorming pivots for my project. The most promising direction that came out of these sessions is very briefly outlined below.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Assisted Cognitive Document Abstraction&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Machine-generated document summaries, even the state-of-the-art, are infrequently used in practice because their summaries are quite poor. Perhaps we can leverage existing models to, rather than produce definite summaries which may be error-prone or difficult to understand, create visualizations over the source text in order to assist humans in comprehension and abstraction.&lt;/p&gt;&lt;p&gt;For example, instead of treating attention weights as input for an output of text, as we do in summarization models, we can view them as output for human interpretation. Aggregate attention distributions (in summarization) highlight areas of the input text that are salient for the summary produced. Note that this is potentially more valuable than highlighting extractive summaries in the text because attention could potentially point towards different areas of the text that relate to a summary sequence. In this way, generation of summaries becomes a proxy task for creating salient highlights for text. We could then use this as a starting point from which ‘related’ sections in an article may be highlighted for users upon interaction (e.g. mousing over an attended-to sequence).&lt;/p&gt;&lt;p&gt;The hope is that these visualizations will increase the speed (over no summarization) or accuracy (over machine summarization) at which readers can abstract / understand key ideas in a document.&lt;/p&gt;&lt;p&gt;Most excitingly, with this re-framing of the task for these models, from sequence output to highlighting, perhaps the models can be modified by adding or removing constraints and mechanisms in order to improve performance for this new task.&lt;/p&gt;&lt;p&gt;Upon presenting this idea (in longer form) to Prof. Choi, I was encouraged to (1) think more about weaknesses of removing summaries altogether and (2) push for more novelty in the approach — is there any meaningful insight about attention models or summarization as a task that can be gleamed from this pivot, and if not, how can I work towards that. While I do not yet have answers to these concerns, the next development may result in a few.&lt;/p&gt;&lt;h4&gt;2. Related work, here at the Allen School&lt;/h4&gt;&lt;p&gt;It was just recently brought to my attention that a Tongshuang (Sherry) Wu, a PhD student in the Interactive Data Lab (in which I am currently working), is also working on visualizations for understanding attention models in NLP. As a part of her project, she and a few of her peers have developed a preliminary visualization tool for an attentive QA model (on the SQuAD dataset).She and my mentor, Kanit (Ham) Wongsuphasawat (whom I have been bouncing ideas off recently), have kindly offered to meet and discuss her work and insights on the problem space. Perhaps collaboration is a possibility — this is exciting! In any case, I suspect talking with Sherry and Ham will provide me the insight and guidance to make a decision on the direction of my project.&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;Future Work&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;I hope to make another blog post in the coming few days as I iron out a future direction. Before this, however, future work is unclear. Until next time!&lt;/p&gt;&lt;h4&gt;In the meanwhile (supplementary material)&lt;/h4&gt;&lt;p&gt;I’ve also been playing around with my visualization prototypes, even as I am uncertain as to whether or not they will be relevant to my project after this week. Here’s what I’ve discovered and implemented in that time.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Interactive heat-maps likely won’t work.&lt;/li&gt;&lt;/ol&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*_bVKvDPn6jBADKwFU9VG3g.gif&quot; /&gt;Interactive heat-maps result in a large degree of lag between input and visual update. This is likely due to the extremely large size of the attention matrix in summarization (24,000 individual squares in the heat-map).&lt;/figure&gt;&lt;p&gt;This is unfortunate, but browser limitations are limitations that must be worked around.&lt;/p&gt;&lt;p&gt;2. Selection over output text.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/999/1*KfMQd6YnDzdH9dZOyjVEIw.gif&quot; /&gt;Mousing over words in the summary results in a view of the attention distribution over the article for that decoder time-step.&lt;/figure&gt;&lt;p&gt;This is similar to the interactive visualizations presented by See et al. in their &lt;a href=&quot;http://www.abigailsee.com/2017/04/16/taming-rnns-for-better-summarization.html&quot;&gt;blogpost&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;3. Brushing over output text.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*nwGIF3VgNDeuFxRml8gGzg.gif&quot; /&gt;Brushing over the summary results in an aggregate attention distribution (i.e. coverage) over the article for the selected decoder time-steps.&lt;/figure&gt;&lt;p&gt;This is an interaction technique I have yet to see in work involving attention analysis, so this is exciting! It looks to be somewhat useful in identifying sections of input text that are salient to an &lt;strong&gt;idea&lt;/strong&gt; rather than a &lt;strong&gt;single word&lt;/strong&gt; in the output text.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=6f773ae418d0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 02 May 2018 06:59:16 +0000</pubDate>
</item>
<item>
	<title>Halden Lin &lt;br/&gt; Team undef.: NLP Capstone | 05: Experimenting</title>
	<guid isPermaLink="false">https://medium.com/p/306dca636d3a</guid>
	<link>https://medium.com/@halden.lin/nlp-capstone-05-experimenting-306dca636d3a?source=rss-2759d54493c0------2</link>
	<description>&lt;p&gt;&lt;em&gt;previous posts: &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-01-options-ee873b6885d5&quot;&gt;&lt;em&gt;01&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-02-getting-started-96fb908765f5\&quot;&gt;&lt;em&gt;02&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-03-project-proposal-7d8e9ec1a8e3&quot;&gt;&lt;em&gt;03&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-04-first-steps-be87c31976b7&quot;&gt;&lt;em&gt;04&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Hi! Here’s what I’ve been up to in the past week.&lt;/p&gt;&lt;h4&gt;Progress on the TensorBoard Plugin&lt;/h4&gt;&lt;p&gt;Real data collection and the backend are functioning!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*l6M8uMcswVoaEtL0_HGt0w.png&quot; /&gt;Architecture of the Attention Plugin.&lt;/figure&gt;&lt;p&gt;At this point last week, I had implemented the nodes in green above. These were the operators / functions required to produce Summary protobufs that are in turn saved to disk.&lt;/p&gt;&lt;p&gt;This week, I completed a number of tasks to produce a bare-bones functioning plugin (sans visualizations).&lt;/p&gt;&lt;p&gt;First, I modified the source code for &lt;a href=&quot;https://github.com/abisee/pointer-generator&quot;&gt;See et al.’s (2017) attentional models&lt;/a&gt; to use the Attention Plugin API to save input text, output text, and attention distributions during evaluation.&lt;/p&gt;&lt;p&gt;Next, I implemented the Attention Plugin’s back-end, which is used to fulfill requests made by the front-end. This service currently offers two services:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;tags This route returns all tags associated for each run in the log. This should include 3 tags for each run: one for each of the input, output, and attention tensors.&lt;/li&gt;&lt;li&gt;attention This route returns a list values associated with the given tag (including time and step stamps). This can be used by the front-end to acquire each of the input, output, and attention lists (converted from tensors) by passing the corresponding tag (retrieved using the tags route).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Finally, as a proof of concept, I modified the front-end provided in the &lt;a href=&quot;https://github.com/tensorflow/tensorboard-plugin-example&quot;&gt;TensorBoard Plugin Example&lt;/a&gt; to consume this back-end, showing it is able to retrieve summaries. Now we just need some visualizations to consume the data!&lt;/p&gt;&lt;h4&gt;Visualization Prototyping Begins&lt;/h4&gt;&lt;p&gt;While data collection and back-end development has been wrapping up, I’ve begun to prototype static visualizations for the plugin. To do this, I used data produced by &lt;a href=&quot;https://github.com/abisee/pointer-generator&quot;&gt;See et al.’s (2017) pre-trained attentional models&lt;/a&gt; (produced only at decode time without the Attention Plugin). Through this process, I hope to gain two things in particular.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;A idea of what will/won’t work as visualizations for summarization tasks.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;A better understanding of the behavior of attentive models&lt;/strong&gt;, and through that a better idea of how static and/or interactive visualizations can further interpretability and understanding.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The first idea I decided to pursue was that of a &lt;strong&gt;condensed heat-map&lt;/strong&gt;. You may recall the conventional heat-map used for attention visualizations described in &lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-01-options-ee873b6885d5&quot;&gt;my first blog post&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/612/1*_sq2Vy_Py7hEXp2tWBBXxg.png&quot; /&gt;Rikters et al. (2017). A heat-map with relatively large cells, allowing for display of text along the axes.&lt;/figure&gt;&lt;p&gt;The issues I noted with this visualization pattern are as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;It is difficult to fit the words (as seen above) on the x-axis, harming readability.&lt;/li&gt;&lt;li&gt;This does not scale well with large input or output (e.g. summarization)&lt;/li&gt;&lt;li&gt;We do not read single-tokens at a time (i.e. y-axis), and input and output are generally not in this format either.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To address the point (2), scalability, I decided to try producing a heat-map with no text labels, and thus each cell could be as small as a single pixel.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*WOlVYgmeZ0DmutTZkDXn2g.png&quot; /&gt;A prototype of a condensed heat-map, where x-axis represents input and y-axis represents output.&lt;/figure&gt;&lt;p&gt;The color scale is a discrete scale, where each step is determined by the quantiles of the weight distribution. The x-axis represents the input text, and the y-axis represents the output text, with each cell representing the amount of attention paid for that pair (output paid to input). The good news here is that the attention distribution is relatively easy to understand at a quick glance. The downside is that cells that are not part of a larger trend (you may notice a lone red spot near the top of the heat-map, approximately a quarter of the way through the x-axis) are harder to make out, as the cells are so small. Further, the distribution is contextless — we don’t know the structure of the input text or what words these high weights are associated with. In the example above, we understand that the model focused primarily on the beginning of the article, but we can’t tell whether that is good or bad without seeing the text.&lt;/p&gt;&lt;p&gt;To remedy this, I decided to also display the input text, with the input text highlighted according to the maximum of the weights it received. This also solves concerns (1) and (3) for the conventional heat-map.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*dJXS9s_391dACPuUwAgPmA.png&quot; /&gt;The input text corresponding to the heat-map above, where each token is highlighted according to its max attention weight received.&lt;/figure&gt;&lt;p&gt;By putting these two together (along with the output text for reference), we can gain a better understanding of how the model arrived at its summary. A viewer can now map the attention distribution shown in the heat-map to text in the input sequence by looking for patches of similar color intensity.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*dMqdcl01Za5U4nYrXpye6g.png&quot; /&gt;A prototype static visualization including both heat-map and highlighted text.&lt;/figure&gt;&lt;p&gt;To get a better sense of how this visualization pattern would play out, I built a light web-page that allows users to cycle through different input / output examples. The gif below shows several of these.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*_ACE44hvUSrwfE3F04gslg.gif&quot; /&gt;The described visualization pattern over several input / output sequences.&lt;/figure&gt;&lt;p&gt;More exploration (inside and outside of this pattern) will need to occur, but this seems promising!&lt;/p&gt;&lt;h4&gt;What’s Next&lt;/h4&gt;&lt;p&gt;Lots to get done this next week. Here’s what’s in my plan:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Continue working on data collection and cleaning up the TensorBoard plug-in. Move beyond the proof-of-concept front-end and show that meaningful visualizations (perhaps extremely basic ones) can be generated using the plugin back-end as a data source.&lt;/li&gt;&lt;li&gt;Read more into the model provided by See et al. (2017), as well as related work, to gain a better understanding of the architecture and function/behavior of attention. A closer study of the works cited in my &lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-02-getting-started-96fb908765f5&quot;&gt;second blog post&lt;/a&gt; will be a good starting point. The better I understand this mechanism the more equipped I’ll be to create meaningful visualizations.&lt;/li&gt;&lt;li&gt;Continue prototyping static visualizations, move on to interactive visualizations. Acquire feedback from peers for both.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Thanks for reading!&lt;/p&gt;&lt;h4&gt;Works Cited&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1704.04368.pdf&quot;&gt;See, Abigail et al. “Get To The Point: Summarization with Pointer-Generator Networks.” &lt;em&gt;ACL&lt;/em&gt; (2017).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ufal.mff.cuni.cz/pbml/109/art-rikters-fishel-bojar.pdf&quot;&gt;Rikters, Matīss, Mark Fishel, and Ondřej Bojar. “Visualizing neural machine translation attention and confidence.” &lt;em&gt;The Prague Bulletin of Mathematical Linguistics&lt;/em&gt; 109.1 (2017): 39–50.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=306dca636d3a&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 25 Apr 2018 06:48:23 +0000</pubDate>
</item>
<item>
	<title>Kuikui Liu, Nicholas Ruhland &lt;br/&gt; Team INLP: NLP Capstone Post #5: A New Hope</title>
	<guid isPermaLink="false">http://mathstoc.wordpress.com/?p=323</guid>
	<link>https://mathstoc.wordpress.com/2018/04/25/nlp-capstone-post-5-a-new-hope/</link>
	<description>&lt;h1&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Dataset Improvements&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last time, on Music NLP.&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; We ran into many midi data parsing issues. Since then, we have discovered a new dataset called the Lakh MIDI Dataset (&lt;/span&gt;&lt;a href=&quot;http://colinraffel.com/projects/lmd/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://colinraffel.com/projects/lmd/&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;) that comes with reasonably well-formed midi files. Using the “Clean MIDI Subset”, we found thousands of midi files with their associated song names and songwriters. From these midi files, we extracted all with nonempty “lyric” fields when parsed via the pretty_midi package (which, incidentally, is also developed by Colin Raffel). After this step, we were left with ~1200 midi files that contain lyrics.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We currently clean the lyrical content by removing all unusual symbols and setting all characters to lowercase. We leave all lyrical tokens as is, which typically means syllable. Due to the inconsistent quality of the MIDI annotations, many songs are tokenized instead to characters, words, or even sentences. We will explore other methods for processing data if this is not sufficient for our results.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is unfortunate we did not find this dataset sooner, because most of our challenges up to this point have been dealing with the poor quality of the gathered data.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Alignment&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For our task of producing karaoke style output, there are two main tasks we have to solve. The first task is the generation of plausible lyrics, and the second is to align the lyrics to the proper time along the musical data. The alignment task has been studied extensively, but specifically aligning lyrical content to MIDI has not been covered in literature we have found. The most common alignment task is lyrics to audio data, as opposed to MIDI. The other common task is to align audio data to the notes defined in a MIDI file. In [1], they show a method that takes a MIDI file with annotated lyrics and uses this to align the lyrics to the raw audio. Unfortunately this is not our task, because we are trying to generate the annotated MIDI.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This week, we have decided to ignore the alignment task and focus primarily on making a reasonable lyrical model. We will return to alignment next week.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The next step was to align the lyrics with pianoroll. Fortunately, well-formed midi data parsed into PrettyMIDI objects come with a “get_piano_roll” function that takes as input a list of “times” which correspond to where in time pretty_midi will attempt to sample the music. As each syllable in the lyrics comes with a start time for when the singer enunciates it, we can pass in these start times to produce pianoroll that is aligned (up to small error) with the lyrics.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For some implementation reasons that are difficult to explain in English, it is possible for “get_piano_roll” to produce NaN entries, which we have replaced with zeros. Due to this and the potential for other such problems, we have forked the pretty_midi package and will be able to modify the code for our needs. For example, as pointed out in [2], “in a given MIDI file there is no reliable way of determining which instrument is a transcription of the vocals in a song”. As such, there are many choices for how to do alignment; pretty_midi has implemented just one. It is an interesting task to see how different alignment methods help or hurt our models.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Lyric prediction&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now that we have aligned pianoroll to lyrics data, we can begin engineering the model. Last time, we used an LSTM to generate lyrics given starting characters. Here, we will again use LSTMs, but instead, work at the syllable level and take as input the pianoroll of a song. As each column of a pianoroll is a time slice, each input vector to the LSTM is a single time slice. Each time slice is a 128-dimensional vector, with each entry representing the activation of an instrument; there are 128 midi recognized “instruments”.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;All that is left is to play with the architecture. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;RNN model&quot; class=&quot;alignnone size-full wp-image-322&quot; src=&quot;https://mathstoc.files.wordpress.com/2018/04/rnn-model1.png?w=676&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At the moment, our pipeline looks like what is shown in the diagram. At each iteration, we take a song, extract the lyrics and the corresponding pianoroll data. We then feed each time slice of the pianoroll data through an encoder unit, then through an LSTM unit, then through a decoder unit, and finally through a softmax to produce the prediction. Our loss is the negative log-likelihood (negative logarithm of the RNN softmax probability of the true syllable).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We will compare our final model to this baseline with respect to the loss on a held-out validation set. We will also experiment with loss functions other than cross entropy to see how it affects the actual lyrical output.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Model results&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We have so far only trained our model for a single iteration over the training set. For an empirical evaluation on the current model quality, we ran a single MIDI through the input and computed the argmax word for each output. This produced a result in which every predicted lyric was an empty message, which is the most common string in the training set. We will explore methods to handle this class imbalance as our next task.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;[1] Müller, Meinard &amp;amp; Kurth, Frank &amp;amp; Damm, David &amp;amp; Fremerey, Christian &amp;amp; Clausen, Michael. (2007). Lyrics-Based Audio Retrieval and Multimodal Navigation in Music Collections. 4675. 112-123. 10.1007/978-3-540-74851-9_10.&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;[2] &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Raffel, Colin and Daniel P. W. Ellis. “Extracting Ground-Truth Information from MIDI Files: A MIDIfesto.” &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ISMIR&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (2016). &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; &lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 25 Apr 2018 04:44:57 +0000</pubDate>
</item>
<item>
	<title>Halden Lin &lt;br/&gt; Team undef.: NLP Capstone | 04: First Steps</title>
	<guid isPermaLink="false">https://medium.com/p/be87c31976b7</guid>
	<link>https://medium.com/@halden.lin/nlp-capstone-04-first-steps-be87c31976b7?source=rss-2759d54493c0------2</link>
	<description>&lt;p&gt;&lt;em&gt;previous posts: &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-01-options-ee873b6885d5&quot;&gt;&lt;em&gt;01&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-02-getting-started-96fb908765f5&quot;&gt;&lt;em&gt;02&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-03-project-proposal-7d8e9ec1a8e3&quot;&gt;&lt;em&gt;03&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Nearing 4 weeks in — I’ve finally got a foothold in the development process. Over this past week I’ve been looking through TensorBoard and TensorFlow source-code and documentation in an attempt to develop a foundation for plugin development.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Notable Resources:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.tensorflow.org/programmers_guide/summaries_and_tensorboard&quot;&gt;TensorBoard Documentation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/tensorboard&quot;&gt;TensorBoard Source Code&lt;/a&gt; and &lt;a href=&quot;https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins&quot;&gt;Existing Plugins&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/tensorboard-plugin-example/blob/master/README.md&quot;&gt;Developing a TensorBoard Plugin&lt;/a&gt; (a simple example)&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Completed Milestones:&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;Understand the structure of a TensorBoard Plugin, specifically how the architecture of the Attention Plugin should look like.&lt;/li&gt;&lt;li&gt;Design and write the data fetching layer.&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Plugin Architecture&lt;/h4&gt;&lt;p&gt;In TensorFlow, data from iterations of training / evaluation is stored as a set of &lt;strong&gt;summaries&lt;/strong&gt;. These can take the form of any tensor, including text, image, scalars, or time series. These are written to disk as the computation graph is executed. Each ‘summary’ takes the form of a &lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/summary.proto&quot;&gt;Summary protocol buffer&lt;/a&gt;, which holds, in addition to the data stored, critical identifying information (tags and metadata). A plugin can then read summaries associated with particular tags and sessions from disk to serve to the TensorBoard front-end via a plugin back-end, where a visualization is rendered.&lt;/p&gt;&lt;p&gt;Following &lt;a href=&quot;https://github.com/tensorflow/tensorboard-plugin-example/blob/master/README.md&quot;&gt;&lt;em&gt;Developing a TensorBoard plugin&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, &lt;/em&gt;the Attention Plugin with have three primary components:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Data API layer. This is what allows users to capture relevant summaries from within their models.&lt;/li&gt;&lt;li&gt;Plugin backend, which serves said summaries.&lt;/li&gt;&lt;li&gt;Frontend, where the visualizations are displayed.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Unlike commonly used plugins such as the &lt;a href=&quot;https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/scalar]&quot;&gt;scalar&lt;/a&gt; and &lt;a href=&quot;https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/histogram&quot;&gt;histogram&lt;/a&gt; plugins, the Attention Plugin consumes 3 distinct values: the input text, the decoded output text, and the attention matrix that correlates the two. Initially, I attempted to store these all in a single Summary protobuf, where the first two rows of the encapsulating matrix would contain the text, and the rest would contain the attention weights. This results in a mixing of string and float types in a single Tensor, which is not valid (to my knowledge) in TensorFlow. I then realized I could store these separately, each in their own summary, and retrieve them via an identifying name. The resulting architecture is shown in the diagram below.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*QK7USkxsSC3u6F0LKbKWXQ.png&quot; /&gt;The architecture of the Attention Plugin.&lt;/figure&gt;&lt;p&gt;I decided to make the output text an optional summary, as models don’t necessarily need to decode (via Viterbi, Beam Search, or otherwise) an output sequence while training. The input text and attention matrix are still valuable, as summary statistics (e.g. coverage, important words, etc) can be gleamed without the decoded text.&lt;/p&gt;&lt;h4&gt;Data API Layer&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*0m1-fllpNYMP666FhR0nbA.png&quot; /&gt;Data API Layer highlighted in green.&lt;/figure&gt;&lt;p&gt;As the TensorBoard authors suggest, the data API layer, defined in attention_summary.py, provides two methods for creating Summary protobufs, which can then be written to disk via a FileWriter. The first is via a TensorFlow op, which can be thought of as a node in the computation graph, that produces a Summary when the graph is executed. The second is by directly creating the protobuf, which allows for data to be saved outside the execution of a TensorFlow session. I’ve implemented both of these. There is a separate method for each of the three datum used by the plugin (input text, output text, attention matrix), and each of the three summary datum are tagged differently (e.g. name/attention_input_summary, name/attention_output_summary) in order to allow for distinguishable retrieval later.&lt;/p&gt;&lt;p&gt;An example of the usage of both methods can be found in attention_demo.py.&lt;/p&gt;&lt;h4&gt;Next Steps&lt;/h4&gt;&lt;p&gt;I suspect the work completed this week was the biggest hurdle in terms of time:code ratio. I would not be surprised if I had to revisit the work done here in order to clean things up or fix small bugs. However, with this understanding and architecture nailed down, I expect implementation of the rest of the plugin will come at a faster pace. With that said, three tasks stand as immediate goals for the next week.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Modify my forked repository of the summarization model created by &lt;a href=&quot;https://arxiv.org/pdf/1704.04368.pdf&quot;&gt;See et al.&lt;/a&gt; (original found &lt;a href=&quot;https://github.com/abisee/pointer-generator&quot;&gt;here&lt;/a&gt;) to produce and save the appropriate summaries for the Attention Plugin. I’ve already started looking into this, and expect to have to fiddle around with the training / evaluation scheme in order to grab an appropriate amount of data.&lt;/li&gt;&lt;li&gt;Implement the backend of the Attention Plugin.&lt;/li&gt;&lt;li&gt;Begin prototyping visualizations (pen &amp;amp; paper) and acquire preliminary feedback.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Until next time.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=be87c31976b7&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 19 Apr 2018 06:33:40 +0000</pubDate>
</item>
<item>
	<title>Kuikui Liu, Nicholas Ruhland &lt;br/&gt; Team INLP: NLP Capstone Post #4: Baseline and MIDI Frustration</title>
	<guid isPermaLink="false">http://mathstoc.wordpress.com/?p=314</guid>
	<link>https://mathstoc.wordpress.com/2018/04/18/nlp-capstone-post-3-baseline-and-midi-frustration/</link>
	<description>&lt;h1&gt;&lt;b&gt;Baseline model&lt;/b&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our baseline approach is taken from Daniil Pakhomov’s excellent blog post[1]. In this post, two separate RNNs are trained as generators: one for lyrical content and one for music content (in piano roll format). We will begin by using his trained lyrical model, and attempt to do conditional sampled character generation given a starting sequence of characters. We loaded the already trained models from the blog post and generated lyrics according to the style of a given songwriter and with a given seed word. The lyrics are generated via a character-level LSTM and generates the next character conditioned on the preceding characters and choice of songwriter. The model is trained on a corpus of song lyrics, where naturally the “correct” character to generate is the next character in the lyrics. Essentially the same mechanism is applied to the musical note generation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The characters are encoded as a one-hot vector over all letters in the English alphabet plus space, comma, etc. Piano rolls already come in an encoding amenable to feeding into RNNs, modulo additional zero padding to ensure every time slice of every piano role has the same dimension. In particular, at each time step (discretized in an appropriately fine-grained way), we have an indicator 0-1 vector on which notes are currently activated.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Here is a song generated in the style of “Queen” with the starting seed sequence of characters “Music”:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Music savor valerite – yah  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Imabribot, bind me – I – well  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;All going down to L&lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;At the eyes of the universe  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Agree, five to the Slim  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;I just want to convincide  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;We wash stars and quiet Ich  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;You had a dirty old baby  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;We won’t  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;We does nothing no one ezy? follohin?  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Sometimes we get down and ooh  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Nothing do you see all night  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;This is my pries  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Joyful the world  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Does their beams  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Surgeon makes the scule la beat  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;Walking out on my pocket ride  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;My faulty power  &lt;/i&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;i&gt;I wear from the ston&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eventually, since we are actually interested in converting the musical information into plausible lyrics, we will need to modify this baseline in the natural way to take as input time slices of the musical instrumentation in piano roll format and predict characters (or syllables) that are to be enunciated simultaneously with the played notes. In this manner, the lyrics come already aligned in a natural way, and the words can be extracted by compressing the letters occurring between spaces.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;b&gt;Dataset parsing&lt;/b&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The MIDI format has an unfortunate number of unexpected caveats. We have spent a majority of our time so far cleaning the data and attempting to use it in existing Python libraries that handle MIDI. A brief description of MIDI[2] covers some of the challenges:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MIDI is made up of a series of messages, such as notes, instruments, and tempo changes. Additional metadata messages exist called meta messages, which can contain text content such as the song title (and lyrics!). In our dataset, lyrics are provided either as “text” messages or as “lyrics” messages.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Messages are grouped into different tracks, often representing separate instruments. Metadata sometimes is located in its own track, and lyrics are sometimes found in a different track from the rest of the metadata.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Durations in the MIDI format are specified as a delta-time relative to the most recent frame. Delta times are in a unit called a tick. Ticks are defined in the file header as a division of the quarter note. The header also defines the number of ticks per frame, which is what the deltas are relative to. Beats per minute (bpm) messages adjust the speed of playback throughout the song.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The most promising library so far is PrettyMIDI[3], which handles most of the unexpected behavior of the basic MIDI format. This library wraps MIDI messages into structured python objects, and provides a conversion from MIDI into piano roll format. Piano roll in this case is a numpy array of shape (num_notes, num_frames). This allows us to input the musical data directly into an RNN. The units are also converted into absolute seconds, as opposed to relative durations. PrettyMIDI can additionally handle embedded lyrics, but this has proven to be a challenge due to the variety of annotation styles in our dataset. About 200 of our 900 files have parsed lyric data properly, so continuing to clean our data is a high priority.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;U&lt;/strong&gt;pd&lt;strong&gt;ate&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Unfortunately, we have found the Kara1k dataset[4] to be inapplicable to our project, as the raw sequence of musical notes and lyrical content are not provided, only metadata that the dataset developers have extracted.&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;[1] &lt;/span&gt;&lt;a href=&quot;http://warmspringwinds.github.io/pytorch/rnns/2018/01/27/learning-to-generate-lyrics-and-music-with-recurrent-neural-networks/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://warmspringwinds.github.io/pytorch/rnns/2018/01/27/learning-to-generate-lyrics-and-music-with-recurrent-neural-networks/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;[2] &lt;/span&gt;&lt;a href=&quot;http://www.music.mcgill.ca/~ich/classes/mumt306/StandardMIDIfileformat.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://www.music.mcgill.ca/~ich/classes/mumt306/StandardMIDIfileformat.html&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;[3] &lt;/span&gt;&lt;a href=&quot;http://craffel.github.io/pretty-midi/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://craffel.github.io/pretty-midi/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;[4] &lt;/span&gt;&lt;a href=&quot;http://yannbayle.fr/karamir/kara1k.php&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://yannbayle.fr/karamir/kara1k.php&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 18 Apr 2018 04:58:56 +0000</pubDate>
</item>
<item>
	<title>Halden Lin &lt;br/&gt; Team undef.: NLP Capstone | 03: Project Proposal</title>
	<guid isPermaLink="false">https://medium.com/p/7d8e9ec1a8e3</guid>
	<link>https://medium.com/@halden.lin/nlp-capstone-03-project-proposal-7d8e9ec1a8e3?source=rss-2759d54493c0------2</link>
	<description>&lt;p&gt;&lt;em&gt;previous posts: &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-01-options-ee873b6885d5&quot;&gt;&lt;em&gt;01&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;&lt;a href=&quot;https://medium.com/@halden.lin/nlp-capstone-02-getting-started-96fb908765f5&quot;&gt;&lt;em&gt;02&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Towards a Better Understanding of Neural Networks: Visualizing Attention in Sequence-to-Sequence Models&lt;/h3&gt;&lt;h4&gt;A brief review of attention&lt;/h4&gt;&lt;p&gt;The idea of ‘attention’ was first introduced to the sphere of natural language processing by Bahdanau et al. (2014) in &lt;em&gt;Neural machine learning by jointly to align and translate&lt;/em&gt;. The idea is fairly straightforward: if we have an encoder-decoder model, at each decoding time-step we generate a vector of attention weights corresponding to each of the encoding units. That is to say, when generating each output token, we pay ‘attention’ to certain parts of the input sequence. Intuitively, this is much how we as humans fixate on parts of text to perform tasks such as summarization or question answering.&lt;/p&gt;&lt;h4&gt;Why visualization?&lt;/h4&gt;&lt;p&gt;In Machine Learning, neural networks have always been a sort of black box. We know they work incredibly well in certain contexts, but its often difficult to understand why they work so well. The following quote sums up the need for interpretability quite well.&lt;/p&gt;&lt;blockquote&gt;&lt;strong&gt;&lt;em&gt;“I believe the most important direction for future research is interpretability.&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; The attention mechanism, by revealing what the network is “looking at”, shines some precious light into the black box of neural networks, helping us to debug problems like repetition and copying. To make further advances, we need greater insight into what RNNs are learning from text and how that knowledge is represented.”&lt;/em&gt;&lt;/blockquote&gt;&lt;blockquote&gt;- Abigail See, PhD - Stanford University, &lt;em&gt;‘So, is abstractive summarization solved?’&lt;/em&gt; from &lt;a href=&quot;http://www.abigailsee.com/2017/04/16/taming-rnns-for-better-summarization.html&quot;&gt;Taming Recurrent Neural Networks for Better Summarization&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Visualization provides an avenue for interpretability by mapping the behavior of the complex networks to easy-to-understand visual encodings.&lt;/p&gt;&lt;h4&gt;A survey of related work&lt;/h4&gt;&lt;p&gt;Although I am not aware of any papers dedicated to the visualization of attention, examples can be readily found in both published literature and online blogposts. For each example below, I’ll point out strengths and weaknesses. Ultimately, I hope to show that there are improvements we can make that can augment the interpretability of the workings of seq2seq attentional models.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Heat-maps&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/404/0*9FCWt3AO5oGxLxtg.&quot; /&gt;Bahdanau et al. (2014). An attention visualization for a seq2seq problem (in this case, translation). Whiter cells represent higher attention.&lt;/figure&gt;&lt;p&gt;The encoding scheme used by Bahdanau et al. (2014) themselves, heat-maps were the most common encoding of attentional data I found. While making the task of relative correlation lookup efficient, these have a couple of weaknesses.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Hard to scale. With tasks involving large input or output (e.g. a hundred or more tokens) the size of the heat-map quickly gets out of hand. Scrolling greatly decreases the effectiveness of a visualization with respect to analysis tasks.&lt;/li&gt;&lt;li&gt;Difficult to read. We generally don’t read in a token-per-line format. Furthermore, source text is rarely in a token-per-line format — we lose insightful information that could be drawn from analyzing the original structure of the text.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Flow-maps&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*I3cdFcqDAcdKEwuCpAPHTA.png&quot; /&gt;Rikters et al (2017). The input sequence is seen on top — output on bottom. Thicker lines denote higher attention.&lt;/figure&gt;&lt;p&gt;Less common, but interesting nonetheless. This kind of flow-map suffers from problems similar to those of heat-maps. One could also argue that the thinness of the lines and their cross-hatch nature hinder interpretability.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Interaction&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*3dTXvSI-L3X3M-MKXRraBA.gif&quot; /&gt;See et al. (2017). Interactive visualization of attention&lt;/figure&gt;&lt;p&gt;Interaction solves many of the issues of the static visualizations surveyed above. We retain the structure of both the input and output text, and lookup is quick and efficient. There is a trade-off, however. We are only able to view the attention of a single word at a time, and as a result it is hard to get a sense of the overall coverage or structure of attention.&lt;/p&gt;&lt;h4&gt;A case study: Summarization&lt;/h4&gt;&lt;p&gt;In particular,&lt;strong&gt; abstractive summarization&lt;/strong&gt;. Summarization is a particularly interesting use case of attention because of the requirement of the condensing of text. The hypothesis is that good abstractive models will be able to cover the majority of the original document. Here I note the difference between &lt;strong&gt;extractive &lt;/strong&gt;and&lt;strong&gt; abstractive &lt;/strong&gt;summarizations. The former involves selecting pieces of the original text, verbatim. The latter involves compressive paraphrasing.&lt;/p&gt;&lt;p&gt;Until recently, most of the work in text summarization has revolved around extractive summarization (See et al. 2017). However, the rising prevalence of recurrent neural networks has allowed for further focus in abstractive summarization. Attention has played an important role in improving results. Below is a brief list of relevant work.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1509.00685.pdf&quot;&gt;Rush, Alexander M. et al. “A Neural Attention Model for Abstractive Sentence Summarization.” &lt;em&gt;EMNLP&lt;/em&gt; (2015).&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1602.06023.pdf&quot;&gt;Nallapati, Ramesh et al. “Abstractive Text Summarization using Sequence-to-sequence RNNs and Beyond.” &lt;em&gt;CoNLL&lt;/em&gt; (2016).&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1712.06100.pdf&quot;&gt;Hasselqvist, Johan et al. “Query-Based Abstractive Summarization Using Neural Networks.” &lt;em&gt;CoRR&lt;/em&gt; abs/1712.06100 (2017): n. pag.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1705.04304.pdf&quot;&gt;Paulus, Romain et al. “A Deep Reinforced Model for Abstractive Summarization.” &lt;em&gt;CoRR&lt;/em&gt; abs/1705.04304 (2017): n. pag.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1704.04368.pdf&quot;&gt;See, Abigail et al. “Get To The Point: Summarization with Pointer-Generator Networks.” &lt;em&gt;ACL&lt;/em&gt; (2017).&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;Summarization Specific Challenges&lt;/h4&gt;&lt;p&gt;While visualizations of attention are helpful in shedding light on the workings of seq2seq models, summarization models in particular have trouble leveraging this window.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;We care about &lt;strong&gt;where&lt;/strong&gt; attention falls just as much as what it falls on. We hope to maximize &lt;strong&gt;coverage&lt;/strong&gt;. This is not currently addressed in any interactive visualizations I am aware of.&lt;/li&gt;&lt;li&gt;We have large input sequences. As discussed in &lt;strong&gt;“A survey of related work,”&lt;/strong&gt; this is particularly problematic for static visualizations.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;With this in mind, I propose areas for improvement in both interactive and static visualizations.&lt;/p&gt;&lt;h4&gt;Where to?&lt;/h4&gt;&lt;p&gt;With interactive visualizations, two things.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;One. Coverage &lt;/strong&gt;is the aggregated attention over a sequence of output tokens. An example given by See et al. can be seen in the figure below. Perhaps allowing brushing to visualizing the aggregate attention over a phrase or sentence can help us understand attention in a more global context.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/956/0*vE-iXohphbWY6Nam.&quot; /&gt;See et al. (2017). Example of coverage.&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Two. Extraction vs Abstraction: &lt;/strong&gt;Ideally, we want our model to learn how to abstract rather than extract. 1:1 exact match attention is less interesting to see than seeing attention to groups of words. Perhaps emphasizing / de-emphasizing can this in visualizations can help aid understanding of models.&lt;/p&gt;&lt;p&gt;With static visualizations, there are two analysis tasks that we wish to optimize for.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Summary. &lt;/strong&gt;What is the overall structure of the attention (e.g. coverage).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Value. &lt;/strong&gt;Which input words are attended (i.e. focused on) by each output timestep?&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;It is difficult to design an &lt;em&gt;effective&lt;/em&gt; static visualization that lends itself well to both of these tasks. Perhaps we need a set of visualizations. For example, one visualization might afford better performance for summary analysis, while another might afford better performance for value analysis. In addition, these static visualizations can incorporate ideas described in previous section.&lt;/p&gt;&lt;p&gt;Additionally, attention visualizations thus far have been for &lt;strong&gt;specific examples&lt;/strong&gt;. Perhaps there a way we can look &lt;strong&gt;across examples&lt;/strong&gt; to better understand the behavior of these neural networks. Derived metrics for attention or coverage could be useful in better understanding and diagnosing these models.&lt;/p&gt;&lt;p&gt;My hope is that addressing these items in both interactive and static visualizations will allow us to better reason about neural networks. In particular, I hope the result can be used as a valuable tool for error analysis, &lt;strong&gt;even&lt;/strong&gt; &lt;strong&gt;beyond&lt;/strong&gt; hyperparameter tuning. Insights could be gleamed that motivate additions or constraints or mechanisms to optimize coverage (e.g. See et al. (2017)) or abstraction.&lt;/p&gt;&lt;h4&gt;The Plan&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Minimum Viable Plan&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Develop a TensorBoard plugin that allows for the static and interactive visualizations described in &lt;strong&gt;Where to?&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Acquire feedback from students / researchers in the Allen School.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I intend to leverage existing models to retrieve data. For example, that &lt;a href=&quot;https://github.com/abisee/pointer-generator&quot;&gt;provided publicly&lt;/a&gt; by See et al. (2017). The dataset used by them is a &lt;a href=&quot;https://github.com/abisee/cnn-dailymail&quot;&gt;modified CNN/Daily Mail Dataset&lt;/a&gt; [Hermann et al. (2015), See et al. (2017)] — a collection of articles and bullet point summaries.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Stretch Goals&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Explore and implement aggregate, cross-example visualizations as described in &lt;strong&gt;Where to?&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Release a beta of the TensorBoard plugin on github and acquire feedback there.&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Works Cited&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1704.04368.pdf&quot;&gt;See, Abigail et al. “Get To The Point: Summarization with Pointer-Generator Networks.” &lt;em&gt;ACL&lt;/em&gt; (2017).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1506.02078.pdf&quot;&gt;Karpathy, Andrej, Justin Johnson, and Li Fei-Fei. “Visualizing and understanding recurrent networks.” &lt;em&gt;arXiv preprint arXiv:1506.02078&lt;/em&gt;(2015).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1712.06100.pdf&quot;&gt;Hasselqvist, Johan et al. “Query-Based Abstractive Summarization Using Neural Networks.” &lt;em&gt;CoRR&lt;/em&gt; abs/1712.06100 (2017): n. pag.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1602.06023.pdf&quot;&gt;Nallapati, Ramesh et al. “Abstractive Text Summarization using Sequence-to-sequence RNNs and Beyond.” &lt;em&gt;CoNLL&lt;/em&gt; (2016).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1705.04304.pdf&quot;&gt;Paulus, Romain et al. “A Deep Reinforced Model for Abstractive Summarization.” &lt;em&gt;CoRR&lt;/em&gt; abs/1705.04304 (2017): n. pag.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1509.00685.pdf&quot;&gt;Rush, Alexander M. et al. “A Neural Attention Model for Abstractive Sentence Summarization.” &lt;em&gt;EMNLP&lt;/em&gt; (2015).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1409.0473.pdf&quot;&gt;Bahdanau, Dzmitry, Kyunghyun Cho, and Yoshua Bengio. “Neural machine translation by jointly learning to align and translate.” &lt;em&gt;arXiv preprint arXiv:1409.0473&lt;/em&gt; (2014).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1506.03340.pdf&quot;&gt;Hermann, Karl Moritz et al. “Teaching Machines to Read and Comprehend.” &lt;em&gt;NIPS&lt;/em&gt;(2015).&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=7d8e9ec1a8e3&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 12 Apr 2018 05:46:21 +0000</pubDate>
</item>
<item>
	<title>Kuikui Liu, Nicholas Ruhland &lt;br/&gt; Team INLP: NLP Capstone Post #3: Proposal</title>
	<guid isPermaLink="false">http://mathstoc.wordpress.com/?p=309</guid>
	<link>https://mathstoc.wordpress.com/2018/04/11/nlp-capstone-post-3-proposal/</link>
	<description>&lt;p&gt;Here, we finally present our project proposal in full.&lt;/p&gt;
&lt;h3&gt;Project Objectives:&lt;/h3&gt;
&lt;p&gt;Our goal for this project is to engineer a model that, given the instrumental (“karaoke”) music for a song in English represented as MIDI data, output a coherent sequence of words corresponding to lyrics for the music. The model will produce timings along with the words to align it with the background instrumentals. Additionally, given the output of the model and the input music, we will automate their combination into a song complete with lyrics and supporting instrumentals. This combined output will be playable and we intend to do live demonstration.&lt;/p&gt;
&lt;h3&gt;Proposed Methodology:&lt;/h3&gt;
&lt;p&gt;Here, we outline the steps we will need to take in detail.&lt;/p&gt;
&lt;li&gt;Data collection (datasets of songs, preferably with instrumentals and lyrics already separated)&lt;/li&gt;
&lt;li&gt;Decide on vocabulary and how to handle uncommon words&lt;/li&gt;
&lt;li&gt;Decide and implement any required preprocessing of the raw MIDI data. Strip lyrics from MIDI data if not already provided in dataset.&lt;/li&gt;
&lt;li&gt;Decide and implement model (see Model Design)&lt;/li&gt;
&lt;li&gt;Implement model sanity checks&lt;/li&gt;
&lt;li&gt;Model tweaking (we expect this will take the majority of the time; see Model Design)&lt;/li&gt;
&lt;li&gt;Implement automated combination of model output (lyrics) and model input (instrumentals)&lt;/li&gt;
&lt;li&gt;Further testing&lt;/li&gt;
&lt;li&gt;Assuming preceding steps are completed satisfactorily, proceed to stretch goals&lt;/li&gt;
&lt;li&gt;Presentation and write-up&lt;/li&gt;
&lt;h3&gt;Model Design:&lt;/h3&gt;
&lt;p&gt;We will pursue a seq2seq RNN approach, taking in input MIDI data represented as a sequence, and outputting a sequence of words from a specified vocabulary. This model will be referred to as the generator. We will employ adversarial training, simultaneously training a many-to-one RNN discriminator that, given the input instrumentals and corresponding lyrics, output if the lyrics were produced by the generator or not. We will follow approaches taken in previous works such as SeqGAN [2] (and [3, 4]), namely using policy gradient ideas from reinforcement learning to obtain gradients that can be backpropagated from the discriminator network through the generator network. We note that syntactic correctness can be enforced in this manner, as malformed lyrical output can be assigned arbitrarily small reward.&lt;/p&gt;
&lt;h3&gt;Stretch Goals:&lt;/h3&gt;
&lt;p&gt;There are several stretch goals we will consider, time permitted. They are as follows, in no particular order.&lt;/p&gt;
&lt;li&gt;Handling multiple languages, particularly those with less available data&lt;/li&gt;
&lt;li&gt;Given a specific songwriter/band, produce the instrumentals along with lyrics for a new song that is in the style of that songwriter/band&lt;/li&gt;
&lt;li&gt;Lyrics generation for duets, or multi-singer songs&lt;/li&gt;
&lt;li&gt;Playing with phoneme-level generation&lt;/li&gt;
&lt;h3&gt;Core Challenges:&lt;/h3&gt;
&lt;p&gt;The core challenges we will need to overcome include alignment of lyrics with the music, and production of sensible lyrics. On the more technical side, it is well-known that ensuring convergence in adversarial training is difficult.&lt;/p&gt;
&lt;h3&gt;Available Resources:&lt;/h3&gt;
&lt;p&gt;Existing music datasets for machine learning tasks are made up of audio samples (such as .wav or .mp3), or MIDI data that specifies timing and notes. For karaoke, lyrics are also provided either as a separate text file (.LRC) specifying the timing of each word, or can be embedded into the MIDI file directly (.KAR). It may also be useful to train a lyric model on a larger corpus of song lyrics, since lyrics are easier to collect than fully time-annotated karaoke files.&lt;/p&gt;
&lt;p&gt;The MusicNet dataset [9] provides 330 classical instrumental audio files, each of which has associated timing provided for every note. Since we are primarily interested in lyrical generation and alignment, this dataset is not going to be useful for creating a language model.&lt;/p&gt;
&lt;p&gt;An existing karaoke dataset called Kara1k [1] provides many features computed from 1000 lyric-annotated songs. This provides lots of metadata about each song, including annotated chords for each timestep of the song. According to the KaraMIR website, these features are extracted from audio samples using Vamp Plugins, which estimates chords with accuracy up to 70%. &lt;/p&gt;
&lt;p&gt;We propose a new dataset (name not yet determined) of MIDI karaoke data with embedded lyrics (.KAR). This dataset contains over 700 files, scraped from a karaoke content aggregator [11]. Timed lyrical data has been extracted from these files, and the precise timing of each note is already available by nature of the MIDI format.&lt;/p&gt;
&lt;p&gt;Additional datasets for training a lyric model may be useful, and many are available. One such dataset is the 55000+ Song Lyrics on Kaggle [10]. This could help our model generalize its lyrical output beyond the limited set of vocabulary available within the 1000 or fewer annotated karaoke songs.&lt;/p&gt;
&lt;h3&gt;Evaluation Plan:&lt;/h3&gt;
&lt;p&gt;Evaluation of our model can be done several ways. The first is simply to listen to the music ourselves. This is the most direct method of evaluation but is not efficient, as likely we will need many iterations of tuning; furthermore, will likely need to listen to several songs to be confident of the model’s quality. Hence, we will also design basic “sanity check” tests for our models.&lt;/p&gt;
&lt;p&gt;Recall that in our proposed methodology, we intend to use adversarial training. The discriminator network itself gives a direct evaluation of the generator. As long as the discriminator is of vetted quality, and the discriminator is run on sufficiently many examples (with roughly even number of generated and true examples mixed in), the generator will be deemed also of sufficient quality (as a “sanity check”).&lt;/p&gt;
&lt;p&gt;Of course, this leaves the question of ensuring the discriminator is good. We can run the discriminator on instrumentals combined with randomly generated words (according to some distribution), or on instrumentals combined with the original lyrics, which are perturbed in some fashion. As an example, one can perturb the original lyrics temporally (making an utterance off-beat when it should be precisely on the down-beat of a bar) or replacing a few words with randomly selected ones (according to some distribution over the vocabulary). These “test inputs” to the discriminator can be generated before-hand.&lt;/p&gt;
&lt;h3&gt;Literature Survey:&lt;/h3&gt;
&lt;p&gt;Here are some relevant papers (most were already included in preceding posts).&lt;/p&gt;
&lt;p&gt;[1] Y. Bayle, L. Marsik, M. Rusek, M. Robine, P. Hanna, K. Slaninova, J. Martinovic, J. Pokorny. “Kara1k: A Karaoke Dataset for Cover Song Identification and Singing Voice Analysis”. IEEE International Symposium on Multimedia (ISM), 2017. &lt;a href=&quot;https://ieeexplore.ieee.org/document/8241597/&quot; rel=&quot;nofollow&quot;&gt;https://ieeexplore.ieee.org/document/8241597/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] L. Yu, W. Zhang, J. Wang, Y. Yu. “SeqGAN: Sequence Generative Adversarial Nets with Policy Gradient”. Proceedings of the Thirty-First AAAI Conference on Artificial Intelligence, 2017. &lt;a href=&quot;https://arxiv.org/abs/1609.05473&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1609.05473&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] S. Lee, U. Hwang, S. Min, S. Yoon. “A SeqGAN for Polyphonic Music Generation”. 2017. &lt;a href=&quot;https://arxiv.org/abs/1710.11418&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1710.11418&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] H. W. Dong, W. Y. Hsiao, L. C. Yang, Y. H. Yang. “MuseGAN: Multi-track Sequential Generative Adversarial Networks for Symbolic Music Generation and Accompaniment”. 2017. &lt;a href=&quot;https://arxiv.org/abs/1709.06298&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1709.06298&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley, S. Ozair, A. Courville, Y. Bengio. “Generative Adversarial Nets”. NIPS, 2014. &lt;a href=&quot;https://papers.nips.cc/paper/5423-generative-adversarial-nets&quot; rel=&quot;nofollow&quot;&gt;https://papers.nips.cc/paper/5423-generative-adversarial-nets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6] T. Salimans, I. J. Goodfellow, W. Zaremba, V. Cheung, A. Radford, X. Chen. “Improved Techniques for Training GANs”. NIPS, 2016. &lt;a href=&quot;https://arxiv.org/abs/1606.03498&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1606.03498&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] M. Arjovsky,  S. Chintala, L. Bottou. “Wasserstein GAN”. 2017. &lt;a href=&quot;https://arxiv.org/abs/1701.07875&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1701.07875&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[8] J. Faille, Y. Wang. “Using Deep Learning to Annotate Karaoke Songs”. 2016. &lt;a href=&quot;https://www.semanticscholar.org/paper/Using-Deep-Learning-to-Annotate-Karaoke-Songs-Faille-Wang/521361762a7327f8fcc77bd9d76eaa2b503f845a&quot; rel=&quot;nofollow&quot;&gt;https://www.semanticscholar.org/paper/Using-Deep-Learning-to-Annotate-Karaoke-Songs-Faille-Wang/521361762a7327f8fcc77bd9d76eaa2b503f845a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[9] J. Thickstun, Z. Harchaoui, S. Kakade. “Learning Features of Music from Scratch”. 2017. &lt;a href=&quot;https://arxiv.org/abs/1611.09827&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1611.09827&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[10] Additional data &lt;a href=&quot;https://www.kaggle.com/mousehead/songlyrics&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[11] Even more additional data &lt;a href=&quot;http://vooch.narod.ru/midi/midi.htm&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 11 Apr 2018 06:45:55 +0000</pubDate>
</item>
<item>
	<title>Kuikui Liu, Nicholas Ruhland &lt;br/&gt; Team INLP: Milestone #2: Music as a Natural Language Task</title>
	<guid isPermaLink="false">http://mathstoc.wordpress.com/?p=304</guid>
	<link>https://mathstoc.wordpress.com/2018/04/06/milestone-2-music-as-a-natural-language-task/</link>
	<description>&lt;h3&gt;Framing the problem&lt;/h3&gt;
&lt;p&gt;The focus of Natural Language Processing relies on patterns in the structure of language and models that find ways to encode the complexities of these structures. Many forms of music also have large amounts of structure which could potentially be discovered using similar models as a standard natural language.&lt;/p&gt;
&lt;p&gt;Music datasets for machine learning purposes have recently become available through projects like MusicNet in 2016 [1]. This music is primarily classical, and provided as both audio and MIDI.&lt;/p&gt;
&lt;h3&gt;Project ideas&lt;/h3&gt;
&lt;p&gt;For our project we are interested in music with lyrical content – both for the potential to create a creative demo and for the interest of making this a language task. The current direction we are most interested in is the generation of lyrics for a song, given its nonlyrical content. This will be broken up into subtasks depending on the feasible scale of the project. Not all of the following points will necessarily be parts of our project, but we will use them as as starting point as we see the success of our models.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating a machine learning model for MIDI music&lt;/li&gt;
&lt;li&gt;Translating MIDI into specific artists or styles&lt;/li&gt;
&lt;li&gt;Creating models for the lyrical content of specific artists or styles of music&lt;/li&gt;
&lt;li&gt;Generating lyrics given an artist or style&lt;/li&gt;
&lt;li&gt;Seq2seq conversion of MIDI into lyrical content&lt;/li&gt;
&lt;li&gt;GANs for either side of the conversion – MIDI encoding or lyrical generating&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using MIDIs in RNNs&lt;/h3&gt;
&lt;p&gt;Work by Pakhomov [2] has already used RNNs to create models for lyrics. In his &lt;a href=&quot;http://warmspringwinds.github.io/pytorch/rnns/2018/01/27/learning-to-generate-lyrics-and-music-with-recurrent-neural-networks/&quot;&gt;blog post&lt;/a&gt; he additionally discusses a method for forming any MIDI into piano roll format. This is essentially a matrix where each column represents a different time step, and each row represents a different note. Having a 1 corresponds to that note sounding at that time. The individual time vectors can be used as the inputs to an RNN at each time step to create a model representing the various songs.&lt;/p&gt;
&lt;p&gt;One possible data source for our project is karaoke data available from various sources online. If available in large enough quantities this could be extremely convenient because it already contains many pairings of MIDI music to their lyrics.&lt;/p&gt;
&lt;h3&gt;Azure&lt;/h3&gt;
&lt;p&gt;We intend to use PyTorch to train our models, and have begun setting up an instance on Microsoft Azure.&lt;/p&gt;
&lt;h3&gt;Relevant work&lt;/h3&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://homes.cs.washington.edu/~thickstn/musicnet.html&quot; rel=&quot;nofollow&quot;&gt;https://homes.cs.washington.edu/~thickstn/musicnet.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;http://warmspringwinds.github.io/pytorch/rnns/2018/01/27/learning-to-generate-lyrics-and-music-with-recurrent-neural-networks/&quot; rel=&quot;nofollow&quot;&gt;http://warmspringwinds.github.io/pytorch/rnns/2018/01/27/learning-to-generate-lyrics-and-music-with-recurrent-neural-networks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] Dong, Hao-Wen. 2017. MuseGAN: Multi-track Sequential Generative Adversarial Networks for Symbolic Music Generation and Accompaniment. &lt;a href=&quot;https://arxiv.org/pdf/1709.06298&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/pdf/1709.06298&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] Yu, Lantao. 2016. SeqGAN: Sequence Generative Adversarial Nets with Policy Gradient. &lt;a href=&quot;https://arxiv.org/abs/1609.05473&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1609.05473&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] Lee, Sang-gil. 2017. A SeqGAN for Polyphonic Music Generation. &lt;a href=&quot;https://arxiv.org/abs/1710.11418&quot; rel=&quot;nofollow&quot;&gt;https://arxiv.org/abs/1710.11418&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 06 Apr 2018 06:30:14 +0000</pubDate>
</item>
<item>
	<title>Kuikui Liu, Nicholas Ruhland &lt;br/&gt; Team INLP: NLP Capstone Post #1: Ideation</title>
	<guid isPermaLink="false">http://mathstoc.wordpress.com/?p=277</guid>
	<link>https://mathstoc.wordpress.com/2018/04/04/nlp-capstone-post-1-ideation/</link>
	<description>&lt;p&gt;In this post, I’d like to briefly discuss three different ideas I have for my capstone project.&lt;/p&gt;
&lt;p&gt;UPDATE (04/05/2018): I am fortunate to be joined by a fellow student, Nicholas Ruhland, for this capstone project.&lt;/p&gt;
&lt;h1&gt;A Theoretical Analysis of RNNs (Research Mode):&lt;/h1&gt;
&lt;p&gt; A recent &lt;a href=&quot;https://arxiv.org/abs/1703.00810&quot;&gt;paper of Professor Naftali Tishby&lt;/a&gt; provided some useful observations on the behavior of feedforward neural networks, and proposed a promising approach to understanding their performance. Earlier empirical work done in the vision community showed that when a convolutional neural network is trained, layers closer to the input learn lower level features (such as edges and corners) and layers closer to the output learn higher level features (“this part of the image resembles a nose, and this other part resembles an eye”). One might expect similar behavior to occur with general feedforward neural networks: that earlier layers learn lower level features of the input and later levels learn higher level features of the input. The key insight here was to think of each layer of a neural network as a Markov chain, where each layer &lt;img alt=&quot;L_{i}&quot; class=&quot;latex&quot; src=&quot;https://s0.wp.com/latex.php?latex=L_%7Bi%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; title=&quot;L_{i}&quot; /&gt; is a (vector-valued) random variable that is conditionally independent of &lt;img alt=&quot;L_{j}&quot; class=&quot;latex&quot; src=&quot;https://s0.wp.com/latex.php?latex=L_%7Bj%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; title=&quot;L_{j}&quot; /&gt; for all &lt;img alt=&quot;j &amp;lt; i - 1&quot; class=&quot;latex&quot; src=&quot;https://s0.wp.com/latex.php?latex=j+%3C+i+-+1&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; title=&quot;j &amp;lt; i - 1&quot; /&gt; given &lt;img alt=&quot;L_{i-1}&quot; class=&quot;latex&quot; src=&quot;https://s0.wp.com/latex.php?latex=L_%7Bi-1%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; title=&quot;L_{i-1}&quot; /&gt;. In this way, information flowing forward in the network can be quantified via notions of entropy from traditional information theory.&lt;/p&gt;
&lt;p&gt;The paper contains some empirical work, observing that there are generally two phases to learning artificial neural networks via stochastic gradient descent: the fitting phase, and the compression phase. The fitting phase is the shorter phase, where the model is quickly tuning itself to minimize the empirical loss function. At the end of this phase, we don't necessarily have a model that will generalize to new data. The compression phase is where the model begins to learn the relevant features in the input, with the intuition that there are many irrelevant parts of the input (I don't need to know every atom in an object to identify it). &lt;/p&gt;
&lt;p&gt;The goal of this project would be to perform a similar theoretical analysis and empirical work for RNN architectures (whose &quot;natural&quot; Markov chain isn't as simple, as there are cycles) on some traditional NLP task, such as Machine Translation, with the goal of studying the flow of information in an RNN architecture, rather than performing comparably to state-of-the-art Machine Translation models (although this can be a stretch goal).&lt;/p&gt;
&lt;p&gt;The relevant steps in this project will likely look like the following:&lt;br /&gt;
1. Reading up on the relevant work by Tishby et. al. (and any other theoretical papers on deep learning).&lt;br /&gt;
2. Understand basic and traditional RNN architectures.&lt;br /&gt;
3. Learning PyTorch.&lt;br /&gt;
4. Implementing several of these architectures and testing (for example, to see if learning also comes in two distinct phases: fitting and compression)&lt;br /&gt;
5. Using these empirical observations, and information theory to analyze these architectures.&lt;br /&gt;
6. Time permitted, play around with new RNN architectures.&lt;/p&gt;
&lt;h1&gt;Musical Style Learning from Musical Scores (Research/Start-Up Mode):&lt;/h1&gt;
&lt;p&gt; This idea lies somewhat outside traditional NLP in that it tackles the language of music. While the alphabet of a musical score consist chiefly of the 12 musical notes, there is added challenge in that several notes may be played simultaneously, especially if there are several instruments involved or simply the two hands of a pianist. Furthermore, the exact timing of each note played matters, note merely the ordering of the notes.&lt;/p&gt;
&lt;p&gt;The idea here is simply to, given the score of a musical piece, represented as a sequence of notes at each time, predict the era (Baroque, Classical, Romantic, etc.) or even, the composer of the piece (Bach, Beethoven, Brahms, etc.) There are several problems to be solved step by step for this project.&lt;/p&gt;
&lt;p&gt;1. Data collection from a large library of musical scores (ex: &lt;a href=&quot;http://imslp.org/&quot;&gt;IMSLP&lt;/a&gt;)&lt;br /&gt;
2. Data formatting so as to be usable.&lt;br /&gt;
3. Model selection.&lt;br /&gt;
4. Model implementation (PyTorch).&lt;br /&gt;
5. Model testing.&lt;/p&gt;
&lt;p&gt;There are also several extensions that can be viewed as stretch goals. For these, the first two can be reused.&lt;/p&gt;
&lt;h3&gt;Musical Score Generation:&lt;/h3&gt;
&lt;p&gt; Now, we learn how to compose a piece that “sounds” similar to a given composer. This will involve learning from the pieces written by a given input composer, and outputting a new piece. One core challenge here is ensuring that the output is syntactically correct.&lt;/p&gt;
&lt;h1&gt;Story Illustration (Start-Up Mode):&lt;/h1&gt;
&lt;p&gt; Given a short story and a specific scene (or place in the text), produce an image that is representative of the scene. This project combines aspects of NLP and vision. This project may also explore generative adversarial methods. One well-known challenge here is convergence.&lt;/p&gt;
&lt;p&gt;Here are the general steps for this project:&lt;br /&gt;
1. Data collection (image captioning dataset can be helpful)&lt;br /&gt;
2. Model selection.&lt;br /&gt;
3. Model implementation (PyTorch).&lt;br /&gt;
4. Model testing.&lt;/p&gt;
&lt;p&gt;As an extension, one can also generate several frames to form a short “movie”. Another can be comic book pane generation.&lt;/p&gt;</description>
	<pubDate>Wed, 04 Apr 2018 06:53:35 +0000</pubDate>
</item>
<item>
	<title>Halden Lin &lt;br/&gt; Team undef.: NLP Capstone | 01: Options</title>
	<guid isPermaLink="false">https://medium.com/p/ee873b6885d5</guid>
	<link>https://medium.com/@halden.lin/nlp-capstone-01-options-ee873b6885d5?source=rss-2759d54493c0------2</link>
	<description>&lt;p&gt;Hello! This post is the first in a series that will document my progression through CSE 481n, taught by Prof. Yejin Choi at the University of Washington.&lt;/p&gt;&lt;p&gt;My github for this project can be found at: &lt;a href=&quot;https://github.com/haldenl/nlpcapstone&quot;&gt;https://github.com/haldenl/nlpcapstone&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;What I hope to explore&lt;/h3&gt;&lt;p&gt;Over the course of the next 10 weeks, I intend to explore the intersection of V&lt;strong&gt;isualization (Vis) and Natural Language Processing (NLP)&lt;/strong&gt;. I am particularly excited to explore the avenues through which Vis can be used to augment the interpretability of Neural Networks (NNs). I’ve spent the past year working around Vis (through classes and research) and am excited to bring what I’ve learned to problems in NLP. I intend to take a &lt;strong&gt;research oriented approach&lt;/strong&gt; to this project.&lt;/p&gt;&lt;h3&gt;Relevant Work (a brief and incomplete list)&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1506.02078.pdf&quot;&gt;Visualizing and Understanding Recurrent Neural Networks, Karpathy et al. (2015)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.aclweb.org/anthology/N16-1082&quot;&gt;Visualizing and Understanding Neural Networks in NLP, Li et al. (2016)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://distill.pub/2018/building-blocks/&quot;&gt;The Building Blocks of Interpretability, Olah et al. (2017)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1612.08220.pdf&quot;&gt;Understanding Neural Networks through Representation Erasure, Li et al. (2017)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ufal.mff.cuni.cz/pbml/109/art-rikters-fishel-bojar.pdf&quot;&gt;Visualizing Neural Machine Translation Attention and Confidence, Rikters et al. (2017)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Directions for Exploration&lt;/h3&gt;&lt;h4&gt;Option 1: Attention&lt;/h4&gt;&lt;p&gt;Visualizing and understanding &lt;strong&gt;attention&lt;/strong&gt;, with a focus on its role in text summarization.&lt;/p&gt;&lt;p&gt;This is my most realized idea at this time, so I will spend more time here explaining my thoughts.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Background:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Visualizations of attention are often used in an effort to understand, and subsequently improve, decisions made by neural networks. To my knowledge, the most common way of visualization attention in seq2seq models is via a 2-dimensional heat-map, wherein the attention each decoding unit gives to each input token can be seen.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/612/1*KvfXxucogv8flZHndSJvHg.png&quot; /&gt;Rikters et al. (2017). An attention visualization for a seq2seq problem (in this case, translation). Whiter cells represent higher attention.&lt;/figure&gt;&lt;p&gt;There are a few issues with this format: (1) it is difficult to fit the words (as seen above) on the x-axis, harming readability; (2) this does not scale well with large input or output (e.g. summarization); and (3) we do not read single-tokens at a time (i.e. y-axis), and input and output are generally not in this format either.&lt;/p&gt;&lt;p&gt;As a whole, this format, while simple, is lacking in interpretability. The cognitive work-load of a viewer is less than optimal.&lt;/p&gt;&lt;p&gt;Alternatives can be found in literature, such as the following from Rikters et al. (2017).&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*jtRrxf5pIB-OCBsoqUjgJQ.png&quot; /&gt;Rikters et al. (2017). The input sequence is seen on top — output on bottom. Thicker lines denote higher attention.&lt;/figure&gt;&lt;p&gt;However, this also suffers from similar interpretability and scalability issues. Moreover, the thickness of lines as an encoding scheme does not lend itself easily to comparison between words.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Proposed Exploration:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perhaps interaction can be used to create a more insightful and interpretable visualization framework for understanding attention. For example, text heat-maps are already used widely to visualize sentiment analysis.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*lsgeuBXGGBog4YkuQNgJVw.png&quot; /&gt;Lin et al. (2017). Visualization of sentiment analysis on a token-by-token basis.&lt;/figure&gt;&lt;p&gt;In a static context, using this method for attention would require repeat of the same input sequence for each word in the output sequence. Using interaction, however, a model creator could brush over single or sequences of words in the output sequence to view corresponding soft-alignment in the input sequence. Aggregate visualizations could be shown to supplement this view (either aggregates over a particular input / output sequence, or aggregates over all input / output sequences).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Baseline: &lt;/strong&gt;A user-interface for an interactive visualization of attention for seq2seq models (e.g. text summarization models). Exploration of how this visualization method can be used to either improve an existing models or understand the differences between models. This would, of course, require building a model from which to obtain data.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Reach: &lt;/strong&gt;Integration into an existing platform, e.g. in PyTorch to be viewable in TensorBoard.&lt;/p&gt;&lt;h4&gt;Option 2: Neural Network Cells&lt;/h4&gt;&lt;p&gt;Visualizing and understanding the role of cells in a neural network. In particular, the meaning of each cell within a model.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Background:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Though more exploration of relevant work will be required if this becomes the path of choice, Kaparthy et al. (2015) present work that serves as the basis for this idea. They show that the role of cells in a neural network can be interpreted by viewing their activations at each point in a given passage. For example, they found in their model a cell that fired at the end of a line (top left).&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*6yoF78PlE5ETNc9-kbya6w.png&quot; /&gt;Kaparthy et al. (2015). Different cells fire in different contexts.&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Proposed Exploration:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perhaps a deeper exploration of the activations of neural network cells could lead to insights for visualizations that may aid the interpretability of neural networks.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Baseline: &lt;/strong&gt;Create a program or UI that generates a visualization (either interactive or static), of the activations of each cell in a neural network. Use this information to posit the meanings of each cell and build further visualizations as needed for exploration. This would require building a model from which to obtain observations.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Reach:&lt;/strong&gt; This is a little loose, as it is unclear how much exploration will be needed to produce results. Perhaps as in Option 1, integration of whatever tool created into an existing framework.&lt;/p&gt;&lt;h4&gt;Option 3: Gates and Value flow in RNN models.&lt;/h4&gt;&lt;p&gt;Visualizing and understanding the flow of values through gates in a Recurrent Neural Network (RNN). In particular, allowing for interpretability of gates and the ‘memory’ of cells.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Background:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;My motivation for this idea is largely anecdotal. I recall while taking the undergraduate NLP course that the concepts of ‘gates’ and ‘memory’ in RNN models (e.g. GRU, LSTM) were difficult for me to wrap my head around. We have these giant networks with variable length ‘memory’ determined by gates that preform well as a result of this mechanism, but how exactly is this mechanism is used, and on what tokens at what points? Kaparthy et al. (2015) present a way of visualizing the ‘memory’ of cells in an LSTM model via plotting of cells and the time spent right or left saturated (right saturated cells remember values for longer periods of time).&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/975/1*Qq9KrefGEl7tM4mPxUi99g.png&quot; /&gt;Kaparthy et al. (2015). Visualizing the cells and their time spent right or left saturated.&lt;/figure&gt;&lt;p&gt;Data-flow graphs have already been developed for neural networks (e.g. Wongsuphasawat et al. (2017)). An RNN specific model with a focus on interpretability of gates may be valuable for the NLP community.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Proposed Exploration:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perhaps producing visualizations of a network of cells using information similar to above could lead to improvements in interpretability and aid model improvement.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Baseline: &lt;/strong&gt;Create a program or UI to generate a visualization, as described above, of an small RNN models. Use this generate insight into the model’s behavior (e.g. compare between models), and explore further from there.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Reach: &lt;/strong&gt;Support larger-scale networks. Integration into existing frameworks.&lt;/p&gt;&lt;h3&gt;Works Cited&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1506.02078.pdf&quot;&gt;Karpathy, Andrej, Justin Johnson, and Li Fei-Fei. “Visualizing and understanding recurrent networks.” &lt;em&gt;arXiv preprint arXiv:1506.02078&lt;/em&gt; (2015).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1506.01066.pdf&quot;&gt;Li, Jiwei, &lt;em&gt;et al.&lt;/em&gt; “Visualizing and understanding neural models in NLP.” &lt;em&gt;arXiv preprint arXiv:1506.01066&lt;/em&gt; (2015).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1612.08220.pdf&quot;&gt;Li, Jiwei, Will Monroe, and Dan Jurafsky. “Understanding neural networks through representation erasure.” &lt;em&gt;arXiv preprint arXiv:1612.08220&lt;/em&gt; (2016).&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ufal.mff.cuni.cz/pbml/109/art-rikters-fishel-bojar.pdf&quot;&gt;Rikters, Matīss, Mark Fishel, and Ondřej Bojar. “Visualizing neural machine translation attention and confidence.” &lt;em&gt;The Prague Bulletin of Mathematical Linguistics&lt;/em&gt; 109.1 (2017): 39–50.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://idl.cs.washington.edu/files/2018-TensorFlowGraph-VAST.pdf&quot;&gt;K. Wongsuphasawat &lt;em&gt;et al&lt;/em&gt;., “Visualizing Dataflow Graphs of Deep Learning Models in TensorFlow,” in &lt;em&gt;IEEE Transactions on Visualization and Computer Graphics&lt;/em&gt;, vol. 24, no. 1, pp. 1–12, Jan. 2018.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1703.03130.pdf&quot;&gt;Lin, Zhouhan, &lt;em&gt;et al.&lt;/em&gt;, “A structured self-attentive sentence embedding.” &lt;em&gt;arXiv preprint arXiv:1703.03130&lt;/em&gt; (2017).&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ee873b6885d5&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 04 Apr 2018 06:43:21 +0000</pubDate>
</item>
<item>
	<title>Sarah Yu &lt;br/&gt; Team Jekyll-Hyde: Inaugural Blog Post</title>
	<guid isPermaLink="true">http://sarahyu.weebly.com/cse-481n/inaugural-blog-post</guid>
	<link>http://sarahyu.weebly.com/cse-481n/inaugural-blog-post</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt;Welcome to the first blog post of &lt;u&gt;&lt;em&gt;Jekyll-Hyde&lt;/em&gt;&lt;/u&gt;&lt;em&gt; &lt;/em&gt;&lt;u&gt;(&lt;/u&gt;my very cool and somewhat related group-of-1 name).&lt;br /&gt;As the name might reveal, I’m interested in using NLP to uncover the duality of language, the ability to simultaneously present both sides of a coin, whether in everyday conversation or more curated prose. Because language matters; so much so that we mend and mold our language to navigate the different social environments and spaces we inhabit, whether for power, survival, or acceptance, and often in the most primitive and subconscious ways. And because in today’s (supposedly) civilized world, the language we employ with another can be a sort of proxy for the relationship we share. I'd like to get at some of these ideas through the NLP capstone and think the next three topics are a potential start. &lt;br /&gt;&lt;br /&gt;1) Language Accommodation (or my unlikely paper title: &lt;em&gt;Nice Guy by Day, A**hole by Night: Language Accommodation for Self-Presentation in Subreddit Communities)&lt;/em&gt;&lt;ul&gt;&lt;li&gt;​MVP: Scrape Reddit user data, identify language baselines for a given subreddit or capture linguistic differences of a single user across subreddits&lt;/li&gt;&lt;li&gt;Stretch Goals: Do both (subreddit baselines and user difference) and not only identify a user's language accommodation, but how they fall in line with the communities' baseline (a kind of hive mentality)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;2) Identifying Condescension (another working title: &quot;&lt;em&gt;Well, Actually&quot;: Identifying Ambiguities in emails from 'helpful' colleagues&lt;/em&gt;)&lt;ul&gt;&lt;li&gt;​MVP: Identify an appropriate data source (ideally emails or more personal interactions), manually identify possible ambiguities, train model (maybe one that doesn't require a large dataset) to identify ambiguous spans of a sentence. &lt;/li&gt;&lt;li&gt;Stretch Goals: Begin identifying entity-entity-relationships with cues from ambiguous interactions or maybe something cooler about context and the different meanings if ambiguous...&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;3) Identifying Disrespect (might as well for consistency: &lt;em&gt;Linguistic (dis)R.E.S.P.E.C.T. - Addressing 90% of Comment Sections)&lt;/em&gt;&lt;ul&gt;&lt;li&gt;​MVP: Scrape Youtube comment data, classify comments as hateful/not hateful, train model on classified comments, test and tune&lt;/li&gt;&lt;li&gt;Stretch Goals: Train a portable model that can work with content from other mediums such as Twitter and Reddit&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;I'll be pursuing one of these ideas in &lt;strong&gt;research mode&lt;/strong&gt; and you can follow along at:&lt;br /&gt;                                      https://github.com/sarahyu17/481n&lt;/div&gt;  &lt;div class=&quot;wsite-spacer&quot; style=&quot;height: 50px;&quot;&gt;&lt;/div&gt;  &lt;div&gt; 				&lt;form action=&quot;http://www.weebly.com/weebly/apps/formSubmit.php&quot; enctype=&quot;multipart/form-data&quot; id=&quot;form-147197638403517045&quot; method=&quot;POST&quot;&gt; 					&lt;div class=&quot;wsite-form-container&quot; id=&quot;147197638403517045-form-parent&quot; style=&quot;margin-top: 10px;&quot;&gt; 						&lt;ul class=&quot;formlist&quot; id=&quot;147197638403517045-form-list&quot;&gt; 							&lt;h2 class=&quot;wsite-content-title&quot;&gt;Any Favorite Paper Titles?&lt;/h2&gt;  &lt;label class=&quot;wsite-form-label wsite-form-fields-required-label&quot;&gt;&lt;span class=&quot;form-required&quot;&gt;*&lt;/span&gt; Indicates required field&lt;/label&gt;&lt;div&gt;&lt;div class=&quot;wsite-form-field&quot; style=&quot;margin: 5px 0px 0px 0px;&quot;&gt;   &lt;label class=&quot;wsite-form-label&quot; for=&quot;input-789590629342031487&quot;&gt;Paper Title &lt;span class=&quot;form-required&quot;&gt;*&lt;/span&gt;&lt;/label&gt;   &lt;div class=&quot;wsite-form-radio-container&quot;&gt;     &lt;span class=&quot;form-radio-container&quot;&gt;&lt;input id=&quot;radio-0-_u789590629342031487&quot; name=&quot;_u789590629342031487&quot; type=&quot;radio&quot; value=&quot;#1&quot; /&gt;&lt;label for=&quot;radio-0-_u789590629342031487&quot;&gt;#1&lt;/label&gt;&lt;/span&gt;&lt;span class=&quot;form-radio-container&quot;&gt;&lt;input id=&quot;radio-1-_u789590629342031487&quot; name=&quot;_u789590629342031487&quot; type=&quot;radio&quot; value=&quot;#2&quot; /&gt;&lt;label for=&quot;radio-1-_u789590629342031487&quot;&gt;#2&lt;/label&gt;&lt;/span&gt;&lt;span class=&quot;form-radio-container&quot;&gt;&lt;input id=&quot;radio-2-_u789590629342031487&quot; name=&quot;_u789590629342031487&quot; type=&quot;radio&quot; value=&quot;#3&quot; /&gt;&lt;label for=&quot;radio-2-_u789590629342031487&quot;&gt;#3&lt;/label&gt;&lt;/span&gt;   &lt;/div&gt;   &lt;div class=&quot;wsite-form-instructions&quot; id=&quot;instructions-Paper Title&quot; style=&quot;display: none;&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 						&lt;/ul&gt; 					&lt;/div&gt; 					&lt;div style=&quot;display: none;&quot;&gt; 						&lt;input name=&quot;weebly_subject&quot; type=&quot;text&quot; /&gt; 					&lt;/div&gt; 					&lt;div style=&quot;text-align: left; margin-top: 10px; margin-bottom: 10px;&quot;&gt; 						&lt;input name=&quot;form_version&quot; type=&quot;hidden&quot; value=&quot;2&quot; /&gt; 						&lt;input id=&quot;weebly-approved&quot; name=&quot;weebly_approved&quot; type=&quot;hidden&quot; value=&quot;approved&quot; /&gt; 						&lt;input name=&quot;ucfid&quot; type=&quot;hidden&quot; value=&quot;147197638403517045&quot; /&gt; 						&lt;input name=&quot;recaptcha_token&quot; type=&quot;hidden&quot; /&gt; 						&lt;input name=&quot;opted_in&quot; type=&quot;hidden&quot; value=&quot;0&quot; /&gt; 						&lt;input type=&quot;submit&quot; /&gt; 						&lt;a class=&quot;wsite-button&quot;&gt; 							&lt;span class=&quot;wsite-button-inner&quot;&gt;vote&lt;/span&gt; 						&lt;/a&gt; 					&lt;/div&gt; 				&lt;/form&gt; 				&lt;div class=&quot;recaptcha&quot; id=&quot;g-recaptcha-147197638403517045&quot;&gt;&lt;/div&gt; 			  			&lt;/div&gt;</description>
	<pubDate>Tue, 03 Apr 2018 07:00:00 +0000</pubDate>
</item>

</channel>
</rss>
