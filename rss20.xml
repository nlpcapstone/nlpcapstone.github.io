<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
	<title>NLP Capstone Spring 2018</title>
	<link>https://nlpcapstone.github.io/</link>
	<language>en</language>
	<description>NLP Capstone Spring 2018 - https://nlpcapstone.github.io/</description>
	<atom:link rel="self" href="https://nlpcapstone.github.io/rss20.xml" type="application/rss+xml"/>

<item>
	<title>Ryan Pham &lt;br/&gt; Team NeuralEmpty: Data Subsets, Parent Feeding, and Future Work</title>
	<guid isPermaLink="false">https://medium.com/p/81ba6be6634</guid>
	<link>https://medium.com/@ryanp97/data-subsets-parent-feeding-and-future-work-81ba6be6634?source=rss-6378d85d3a9b------2</link>
	<description>&lt;p&gt;In the last week, I’ve been training more models on different subsets of the data and began working on implementing parent feeding. Though I don’t think I will have parent feeding done in time for the final presentation, it’ll be a nice checkpoint to start at after this capstone finishes.&lt;/p&gt;&lt;h4&gt;Data Subsets&lt;/h4&gt;&lt;p&gt;The model trained on all of Michael Goodman’s data last week had an issue with SMATCH (which is why the SMATCH score was omitted in last week’s blogpost). It turns out that there were a couple translation pairs in which the unicode character U+3000 (ideographic/wide space) was used as a token causing it to appear as a surface predicate in some development examples. As a result, SMATCH had issues dealing with these and crashed. Considering how infrequently this surface predicate actually occurred, I decided to invalidate the graphs that contained them during post-processing. This model ‘achieved’ a SMATCH score of 0.54. For reference, when treating the predicates as a bag of words, the model had an F1 score of 0.52.&lt;/p&gt;&lt;p&gt;Considering the Kyoto Corpus suffers the issue of having many uncommon named entities, I decided to train a model on just the Japanese WordNet corpus. This dataset is significantly smaller with ~105,000 training examples compared to ~325,000 training examples for the combined corpus. I figured this dataset would have significantly fewer named entities and not mis-predict the named abstract predicate so often. This model did, in fact, achieve a better SMATCH score with a F1 of 0.57 and an F1 score of 0.54 when treating the predicates as a bag of words. Notably, the named abstract predicate was mis-predicted less often, though it was still in the top 10 mis-predicted predicates. This resulted in a higher abstract predicate precision, ~0.04 above. Surprisingly, however, the surface predicate precision drop ~0.04. I’m not entirely sure why quite yet, but it may be due to the ratio of number of surface predicates to number of abstract predicates in each dataset.&lt;/p&gt;&lt;p&gt;I’m currently training a model with all of the data from Michael Goodman and adding all the training examples I had parsed from the Tanaka Corpus. In theory this model should perform slightly better than the model trained with solely Michael Goodman’s dataset, though I won’t be able to tell until late tomorrow considering the time it takes to train a single epoch.&lt;/p&gt;&lt;h4&gt;Parent Feeding&lt;/h4&gt;&lt;p&gt;Working with OpenNMT’s codebase has been quite a pain. Though I’ve implemented a short method to calculate the parent indicies of a single graph, I have had lots of trouble figuring out where exactly they should be calculated and how they will be stored. For now I’ve placed it as a step in ShardedTextCorpusIterator. So the pipeline for generating the input to OpenNMT is still the same. The preprocess.py script takes the same inputs and outputs as usual. The only thing that is different now is the saved files will now also contain parent indicies for each example.&lt;/p&gt;&lt;p&gt;I haven’t been able to figure out how batching will work with this quite yet, so I’m meeting up with Jan later this week to discuss how we should do batching for this. Once Jan clears up how batching works on Wednesday, I should have a good enough understanding to attempt to modify/write a decoder that also uses parent feeding.&lt;/p&gt;&lt;h4&gt;ELMo Embeddings&lt;/h4&gt;&lt;p&gt;After discussing with Jan more, I likely would not see significantly improved results with ELMo embeddings unless I was able to scrape more data to train these embeddings with. Since the vocabulary the model is trying to predict are predicates and edges, I would have to generate graphs after scraping more data for both languages. Considering how little time I have left, I decided to leave this for future work.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=81ba6be6634&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 29 May 2018 00:20:11 +0000</pubDate>
</item>
<item>
	<title>Belinda Li &lt;br/&gt; Team Sentimentity: NLP Capstone Blog #9: Additions to Advanced Model</title>
	<guid isPermaLink="false">https://medium.com/p/db16f27c255d</guid>
	<link>https://medium.com/@be.li.nda/nlp-capstone-blog-9-additions-to-advanced-model-db16f27c255d?source=rss-fad49d942bf3------2</link>
	<description>&lt;p&gt;This week, I took into account my error analysis from last week and made some modifications to my model to try and improve F1 scores.&lt;/p&gt;&lt;h3&gt;Modification to Architecture&lt;/h3&gt;&lt;p&gt;I modified the architecture of my model a little to better aggregate across mentions. Instead of taking the mean across all mentions for each entity as I had done previously, I paired up all mentions of the holder/target entity, concatenated them, and then aggregated each pair through an attentive sum.&lt;/p&gt;&lt;p&gt;More specifically, holder/target aggregation is computed as follows:&lt;/p&gt;&lt;p&gt;Let [&lt;em&gt;h_0, h_1, …, h_n&lt;/em&gt;] be the encoded holder mentions and [&lt;em&gt;t_0, t_1, …, t_m&lt;/em&gt;] be the encoded target mentions.&lt;/p&gt;&lt;p&gt;I took all pairwise combinations of the mentions and concatenated them, creating (&lt;em&gt;n&lt;/em&gt; x &lt;em&gt;m&lt;/em&gt;) pairs in total:&lt;/p&gt;&lt;p&gt;[&lt;em&gt;h_0, t_0&lt;/em&gt;], [&lt;em&gt;h_1, t_0&lt;/em&gt;], …, [&lt;em&gt;h_n, t_0&lt;/em&gt;]&lt;/p&gt;&lt;p&gt;[&lt;em&gt;h_0, t_1&lt;/em&gt;], [&lt;em&gt;h_1, t_1&lt;/em&gt;], …, [&lt;em&gt;h_n, t_1&lt;/em&gt;]&lt;/p&gt;&lt;p&gt;…&lt;/p&gt;&lt;p&gt;[&lt;em&gt;h_0, t_m&lt;/em&gt;], [&lt;em&gt;h_1, t_m&lt;/em&gt;], …, [&lt;em&gt;h_n, t_m&lt;/em&gt;]&lt;/p&gt;&lt;p&gt;I then passed each concatenated pair through a linear layer to compute attention&lt;/p&gt;&lt;p&gt;&lt;em&gt;α_ij = &lt;/em&gt;&lt;strong&gt;w&lt;/strong&gt;&lt;em&gt;_α &lt;/em&gt;*&lt;em&gt; &lt;/em&gt;[&lt;em&gt;h_i, t_j&lt;/em&gt;]&lt;em&gt; + b_α&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;a_ij&lt;/em&gt; = softmax(&lt;em&gt;α_ij&lt;/em&gt;)&lt;/p&gt;&lt;p&gt;…and computed the final representation &lt;em&gt;x &lt;/em&gt;of the holder/target pair through an attentive sum:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/199/1*kq036bF6zKqsTBN1OKL5uQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Afterwards, I append embeddings for any features &lt;em&gt;Φ(x)&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;to &lt;em&gt;x&lt;/em&gt;, and pass it through a final linear layer to compute the final scores.&lt;/p&gt;&lt;p&gt;&lt;em&gt;v = &lt;/em&gt;[&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;Φ_1(x)&lt;/em&gt;,&lt;em&gt; Φ_2(x)&lt;/em&gt;, &lt;em&gt;Φ_3(x)&lt;/em&gt;, &lt;em&gt;Φ_4(x)&lt;/em&gt;, &lt;em&gt;Φ_5(x)&lt;/em&gt;]&lt;/p&gt;&lt;p&gt;scores = &lt;strong&gt;w&lt;/strong&gt;&lt;em&gt;_α &lt;/em&gt;*&lt;em&gt; v + b_α&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The aggregation mechanism is still suboptimal, however, given that I’m basically doing the equivalent of just summing up weighted copies of the encoded holder and target entities — more experimentation is necessary on this point. Moreover, I’d like to take into account the proximity of the holder and target mentions into the attention mechanism — giving more attention to entity pairs that are closer or co-occur in a sentence.&lt;/p&gt;&lt;h3&gt;Addition of Features&lt;/h3&gt;&lt;p&gt;The second thing I did this week was add features to my model in accordance with my error analysis from last week. 50-dimensional embeddings for each features are appended to the entity pair representation right before the last step of the model, where the entire vector is then passed through a linear layer to compute the final scores.&lt;/p&gt;&lt;p&gt;I took into account 5 features total:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Co-occurrence feature&lt;/strong&gt;: a feature for the number of sentences in which the holder/target entity co-occurs&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Holder mention frequency feature&lt;/strong&gt;: a feature for the number of times the holder entity is mentioned in the document&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Target mention frequency feature&lt;/strong&gt;: a feature for the number of times the target entity is mentioned in the document&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Holder mention rank feature&lt;/strong&gt;: a feature for the rank of the holder entity, relative to all other entities, and its number of mentions in the document&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Target mention rank feature&lt;/strong&gt;: a feature for the rank of the target entity, relative to all other entities, and its number of mentions in the document&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;As my ablation studies show, all of the features are helpful in improving the score:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/722/1*qllhecRTNgittY0GTyBQmQ.png&quot; /&gt;Ablation studies, where I removed the one of the features each time and ran the model on the dev data.&lt;/figure&gt;&lt;h3&gt;Final Plan&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Train separate classifiers for co-occurring and non-co-occurring entities&lt;/li&gt;&lt;li&gt;Experiment with aggregation functions&lt;/li&gt;&lt;li&gt;Encode restraints in the loss function (if time suffices)&lt;/li&gt;&lt;li&gt;Write the final paper and get a demo up and running&lt;/li&gt;&lt;/ol&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=db16f27c255d&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 23 May 2018 05:53:49 +0000</pubDate>
</item>
<item>
	<title>Tam Dang, Karishma Mandyam &lt;br/&gt; Team Illimitatum: Advanced Model Update: From Definition Extraction to Entity Discovery</title>
	<guid isPermaLink="false">https://medium.com/p/ef93c2149aa2</guid>
	<link>https://medium.com/nlp-capstone-blog/advanced-model-update-from-definition-extraction-to-entity-discovery-ef93c2149aa2?source=rss----9ba3897b6688---4</link>
	<description>&lt;p&gt;Over the past few weeks, developing a dataset to test our model and flesh out this novel task has proven to be a difficult task in itself. Here, we discuss what worked, what didn’t work, and how the development of our dataset has influenced our perspective of the task, and ultimately, what we will now expect out of our advanced model.&lt;/p&gt;&lt;p&gt;To recap, we began making preliminary version of our dataset using ROUGE, cosine similarity, and skip-bigrams. In particular, given a definition-document pair, we aimed to extract sentences from the document that were most conducive to describing and re-creating the definition. From there, our model can compute latent representations of the term, sentences, and document as a whole, in order to learn how to extract these sentences we’ve chosen.&lt;/p&gt;&lt;h3&gt;The Heuristics that Failed&lt;/h3&gt;&lt;p&gt;Unfortunately, we can’t all be winners.&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;Cosine Similarity&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;We used &lt;a href=&quot;https://spacy.io/usage/vectors-similarity&quot;&gt;spaCy’s&lt;/a&gt; implementation of cosine similarity using context vectors. Admittedly, cosine similarity does a great job of ruling out sentences that have nothing to do with the current definition when extracting. However, there was much too little variation in the scores that sentence-definition pairs received. Often, they would range from 0.80 to 0.94, and tended to cluster around 0.83–0.87 and 0.90 to 0.93. Not only are so many sentence-definition pairs scoring so highly, it becomes a very fine line between what we should keep and what we shouldn’t.&lt;/p&gt;&lt;p&gt;We attempted to be extremely strict and only keep pairs that scored 0.94; but this often led to many great pairs being ruled out. We speculate that medical language in general tends to cluster together with respect to the rest of the vocabulary in which spaCy’s word vectors were trained. We also speculate that being a bag-of-words method in defining similarity, much of the richness in context and order that makes differences and similarity obvious at a glance are washed away. Despite the method clearly being able to separate contrived sentence-definition pairs, in the landscape of our data, it fails to draw the line the way we’d like it to.&lt;/p&gt;&lt;h4&gt;Skip-bigrams&lt;/h4&gt;&lt;p&gt;This heuristic in particular was troublesome in that, many UMLS definitions were 1–2 sentences long, while others were several paragraphs. So the idea of using the number of overlapping skip-bigrams between a sentence-definition pair will severely punish shorter glosses. Because of this, longer definitions having little relevance to a sentence may likely still match to it.&lt;/p&gt;&lt;h3&gt;The Heursitics that Worked&lt;/h3&gt;&lt;p&gt;After several attempts at tuning the above heuristics, we decided to look for more. The following heuristics are how our final dataset will be constructed.&lt;/p&gt;&lt;h4&gt;Google’s Top 10,000 Words&lt;/h4&gt;&lt;p&gt;There’s currently a &lt;a href=&quot;https://github.com/first20hours/google-10000-english&quot;&gt;repository&lt;/a&gt; containing the top 1000 and top 10000 words according to n-gram frequency analysis of Google’s Trillion Word Corpus. In particular we are using the &lt;strong&gt;no swears &lt;/strong&gt;list.&lt;/p&gt;&lt;p&gt;Given the roughly 800,000 glosses that UMLS provides us, we shave this down to roughly 165,000 by removing all definitions that contain an synonym that is also contained within the Google no-swears top 10k list. This drastically reduces our search space when creating examples, and ultimately we are okay with it since common words are trivial to define.&lt;/p&gt;&lt;h4&gt;First 15%&lt;/h4&gt;&lt;p&gt;Given a definition-document pair, only attempt extraction if at least one of the aliases (synonyms) that the definition defines occurs within the first 15% of the sentences.&lt;/p&gt;&lt;h4&gt;Word Embeddings&lt;/h4&gt;&lt;p&gt;Following the first two heuristics, given definition-document pairs that make it through these filters we then extract &lt;strong&gt;all&lt;/strong&gt; sentences containing &lt;strong&gt;any &lt;/strong&gt;of the alias for the document.&lt;/p&gt;&lt;p&gt;We then calculate a similarity score between each sentence and the gold standard definition of the term. We do so by using pre-trained word vectors, namely Glove vectors, to better represent sentences. Each sentence is represented as the average of all its word vectors and similarity is defined as the Euclidean distance between the gold standard vector and the sentence vector. Given these distances, we sort them and choose the smallest 5 sentences if there are that many. We believe that through this, we are using better representations of sentences as opposed to the heuristics we tried previously. Although we did consider training our own set of word vectors (the large size of the Semantic Scholar corpus would allow us to do this), we felt that given the time constraints, Glove vectors were sufficient for now.&lt;/p&gt;&lt;p&gt;We then filter out the document to include only mentions of the entity that we are trying to extract (or its aliases). This approach is made possible by UMLS pairing all definitions with all of the aliases that it defines.&lt;/p&gt;&lt;p&gt;After choosing the sentences for each term-document pair, we then incorporate aliases when creating the final training examples. Recall that each training example includes a term, a gold standard definition, sentences within the document, and the target vector. In order to encourage the model to associate synonyms with each other, we can swap out the terms and its aliases in the target sentences, randomly inserting an alias or the term in places that another alias or term might be. This will not only give us a way to produce more training examples, it will also help the model understand the contexts of similar words, which might help it discover entities.&lt;/p&gt;&lt;h3&gt;Reframing the Problem to Entity Discovery&lt;/h3&gt;&lt;p&gt;Originally, our task was to generate definitions of entities consistent with our corpus. We then reframed the task as an extractive process.&lt;/p&gt;&lt;p&gt;The dataset described above however, will allow us to solve a task that could be described as a ‘superclass’ of definition extraction, which essentially aims to extract all sentences &lt;strong&gt;relevant&lt;/strong&gt; to an entity as opposed to only sentences that help &lt;strong&gt;define &lt;/strong&gt;it. We call it ‘Entity Discovery’, a term coined by AI2 when they originally proposed this type of task during the early stages of the capstone. Given our ranking scheme, we will still tend towards selecting sentences conducive to definitions, but we’re not quite confident enough that every sentence our heuristics will choose resemble a definition or add to one.&lt;/p&gt;&lt;p&gt;Rather, we now see the potential of our model (which, given this dataset, does not have to change at all!). This new dataset will allow us to train a model to learn latent representations of queries and map them to latent representations of sentences. Note that often times, chemical and medical terms have numerous aliases that take different but systematic forms. Given a reasonably trained model on such data, it should theoretically generalize to novel terms and learn what synonyms would look like and the contexts in which they would appear, ones that have not been added to KBs yet, aiding researchers and medical students to learn about ill-defined terms that have synonyms and reference that have not yet been fully documented.&lt;/p&gt;&lt;p&gt;We call this a ‘superclass’ of definition extraction presumably because, if we were successful at extracting all sentences pertinent to an entity, that definition extraction would simply take a subset of these sentences.&lt;/p&gt;&lt;h3&gt;In Conclusion&lt;/h3&gt;&lt;p&gt;It has taken some time and experimentation to find our footing in creating this dataset, but we’ve found it. The scripts are running, the data looks reasonable, and we are excited to finally see how our model will perform.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ef93c2149aa2&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/nlp-capstone-blog/advanced-model-update-from-definition-extraction-to-entity-discovery-ef93c2149aa2&quot;&gt;Advanced Model Update: From Definition Extraction to Entity Discovery&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/nlp-capstone-blog&quot;&gt;NLP Capstone Blog&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Wed, 23 May 2018 05:34:45 +0000</pubDate>
</item>
<item>
	<title>Pinyi Wang, Dawei Shen, Xukai Liu &lt;br/&gt; Team Overfit: #8 Milestone: Advanced model attempt #2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-9203775015655831448.post-3973266691169482239</guid>
	<link>https://teamoverfit.blogspot.com/2018/05/8-milestone-advanced-model-attempt-2.html</link>
	<description>&lt;h2 style=&quot;height: 0px;&quot;&gt;&lt;span&gt;Team Overfit&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;Project repo: &lt;span style=&quot;font-size: 18.72px;&quot;&gt;&lt;a href=&quot;https://github.com/pinyiw/nlpcapstone-teamoverfit&quot;&gt;https://github.com/pinyiw/nlpcapstone-teamoverfit&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;Team members: Dawei Shen, Pinyi Wang, Xukai Liu&lt;/span&gt;&lt;/h4&gt;&lt;div style=&quot;text-align: start; text-indent: 0px;&quot;&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Blog Post: #8: 05/15/2018&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Social Media Predicts Stock Price (StartUp Mode)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;This week, we weren't able to make our model make better prediction on stock price movement.&lt;/span&gt;&lt;br /&gt;&lt;h3&gt;&lt;span&gt;We have tried:&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Improve initialization weights and bias&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Increase standard deviation so that the initial price prediction varies more preventing the model to be stuck at local minima&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Decrease bias so that the initial prediction are closer to the expected, and therefore, converge faster&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Tune hyperparameters of LSTM and try out different settings of data&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Number of time steps of RNN&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Size of dictionary&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Remove vocab that have high document frequency&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Number of LSTM hidden units&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Number of RNN layers&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Learning rate&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Dropout layer&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Visualize and investigate our prediction/training to have better understanding of our model&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Find out the top k words that have most weight for a given day&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Most of them do not seem to relate to stock price movement&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Compare the prediction/target graph for each epochs to see if the predictions are improving/convergin&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;In progress and next steps:&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Find good news data and write preprocessor&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Research on better featurizations&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Research on better model&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Add learning rate decay to our training&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Investigate the correlation between sentiment analysis of Tweets and stock price movement&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 16 May 2018 06:37:00 +0000</pubDate>
	<author>noreply@blogger.com (Team Overfit)</author>
</item>
<item>
	<title>Tam Dang, Karishma Mandyam &lt;br/&gt; Team Illimitatum: Advanced Model Attempt #1 (Continued)</title>
	<guid isPermaLink="false">https://medium.com/p/2ac19f7510f9</guid>
	<link>https://medium.com/nlp-capstone-blog/advanced-model-attempt-1-continued-2ac19f7510f9?source=rss----9ba3897b6688---4</link>
	<description>&lt;p&gt;This week we continued work on the advanced version of the model which incorporates the SummaRuNNer architecture from (Nallapati et al.) and adds in a character level RNN for parsing UMLS terms. The models are complete but we ran into several challenges along the way, namely constructing our final training dataset from Semantic Scholar and UMLS terms. Without the dataset, we have not been able to train our model. In this blog post, we dissect our current challenges and our plans looking forward.&lt;/p&gt;&lt;h4&gt;Building the Model&lt;/h4&gt;&lt;p&gt;The original SummaRuNNer model fit our requirements pretty well. However, we ran into several challenges when implementing the model. First, there were no existing implementations of the architecture, so we had to implement the model from scratch. Furthermore, the time we spent building the model detracted from time that we could have spent working on gathering the data. The model used by Nallapati et al. also did not condition on a particular term in the paper. Our approach requires that we somehow incorporate the term so we spent additional time figuring out a character level RNN which encodes the term and includes it in the many affine transformations described in the SummaRuNNer paper.&lt;/p&gt;&lt;p&gt;Moreover, we had to consider how to optimize the model when it came to large amounts of data. One of the approaches we worked on was batching, essentially evaluating many sentences at once. This allowed us to speed up training by a significant amount. Finally, we spent time integrating our model into the existing architecture. Ultimately, the model was difficult, but completed.&lt;/p&gt;&lt;h4&gt;Collecting the Data&lt;/h4&gt;&lt;p&gt;There are no current datasets that we can use to train our model. To quickly recap the requirements for the data, each training example must comprise of one document, one entity or technical term, and a target representing the ideal summary of the document. In order to build this dataset, we had to individually collect each of these aspects and combine them.&lt;/p&gt;&lt;p&gt;In order to gather technical terms, we used the UMLS dataset, which contains over 150,000 medical terms. Obtaining the license to download UMLS and the actual process of downloading the data through the UMLS specialized data downloader took several days. Parsing the data was fairly straightforward however.&lt;/p&gt;&lt;p&gt;In order to gather documents, we are using the AI2 Semantic Scholar dataset, which contains over 7 million research papers. While the downloading process for Semantic Scholar was incredibly slow, we realized that we couldn’t simply download all the documents because some of them were not medical papers. Handling Computer Science papers becomes an issue because our entities are medical terms and we do not expect a computer science paper to have any relation to medical terms.&lt;/p&gt;&lt;p&gt;This brings us to the process of combining Semantic Scholar documents with UMLS terms. We use a distant supervision method which essentially applies a greedy approach to extract a group of sentences from each document with the highest ROUGE score while using the UMLS definitions as reference summaries. This is precisely where we are currently struggling. Computing ROUGE takes a very long time, considering the fact that we compute ROUGE as many times as there are sentences in each document. Though we filter out document-term pairs based on whether the term appears in the document, it seems that the ROUGE metric may not yield the best target sentences for us because our reference summaries tend to be fairly short while our documents tend to be fairly long. Currently, we have all the scripts running for this data collection process but aim to develop a better heuristic to collect data.&lt;/p&gt;&lt;h4&gt;Next Steps&lt;/h4&gt;&lt;p&gt;At this point, we have not been able to test our data because we are still building the dataset. In order to speed up this process, our immediate goal will be to develop a faster and more accurate heuristic to gather target sentences from each document. We will also explore filtering out the Semantic Scholar papers to only retain medical papers, which are more likely to correlate to the terms in UMLS. Once we build our dataset, we can test our completed models, tune hyper-parameters, and potentially utilize attention mechanisms while constructing the document level representation used by SummaRuNNer.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=2ac19f7510f9&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/nlp-capstone-blog/advanced-model-attempt-1-continued-2ac19f7510f9&quot;&gt;Advanced Model Attempt #1 (Continued)&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/nlp-capstone-blog&quot;&gt;NLP Capstone Blog&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Thu, 10 May 2018 06:40:34 +0000</pubDate>
</item>
<item>
	<title>Aaron Johnston, Lynsey Liu &lt;br/&gt; Team Viterbi Or Not To Be: Advanced Model #1, Part 2</title>
	<guid isPermaLink="false">https://medium.com/p/d7a06e892cdd</guid>
	<link>https://medium.com/@viterbi.or.not/advanced-model-1-part-2-d7a06e892cdd?source=rss-c522ef075bb3------2</link>
	<description>&lt;p&gt;Welcome back to Advanced Model #1 and thanks for sticking with us! This week, we’ve gotten some promising results in our first advanced model attempt and made a lot of progress with the incorporation of a second data source, although there is still work to be done toward fully integrating the chatlog data into a single model. In this post, we’ll go over what we’ve done since last week and give some numbers as well as example summaries from this model, then start laying out what we would like to achieve for Advanced Model #2.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*AsUzi76WPSKaMji6.&quot; /&gt;Our project roadmap and where we are at now, highlighted in orange&lt;/figure&gt;&lt;h4&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;We decided to use preprocessing instead of features for some of the attributes of our data after discovering that our feature sets failed to focus solely on the conversation in some data types and instead gave false importance to format-specific patterns such as quoted text in emails. We eventually settled on the following distinction:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Attributes of the data that existed at the conversation-level should be features: that is, anything universally applicable to textual conversations in general was implemented as a feature for the model&lt;/li&gt;&lt;li&gt;Attributes of the data at the data source-level should be preprocessed. This allowed us to share features across different data types (for example, using tf-idf across both emails and chatlogs) while minimizing the number of “dead” features (for example, simply assigning a constant value to a feature for detecting email signatures when vectorizing the chatlog data).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The preprocessing we decided to do falls under the following categories:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Identifying format-specific content:&lt;/strong&gt; Quirks of the data format can sometimes present problems for our model, for example, we noticed separator lines composed of all dashes or symbols as well as email signatures (left example below) were making it into the summaries.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Removing quoted email text:&lt;/strong&gt; The email dataset contains quoted text of previous emails in the thread when there is an email reply, causing duplication of sentences in the summaries because the model seems to want to include the important sentence as much as possible. An example of a generated summary with the problem is in the right example below.&lt;/p&gt;&lt;p&gt;After initially parsing the data, we do this preprocessing step to identify such sentences using simple regular expression rules and remove them before computing feature vectors.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*vUpBdbFjg5Exfd-8.&quot; /&gt;An email signature (left) and quoted text (right) in generated summaries before adding preprocessing&lt;/figure&gt;&lt;h4&gt;&lt;strong&gt;Adding the Chatlog Dataset — New Pipeline&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;One of our major goals for the advanced model was to incorporate the chatlog dataset we identified early on in the project. Of course, having the capability to automatically generate summaries for chat conversations expands the usefulness and possible applications of our model: although email threads are incredibly common in today’s world, chat communication is also experiencing an incredible rise in popularity. Furthermore, as chat communications tend toward a large number of participants and a model of very frequent responses, our analysis is that chat data summaries have the potential to be even more useful than their email counterparts.&lt;/p&gt;&lt;p&gt;However, our goal with incorporating the chatlog data is ultimately to combine it with the email data in order to be able to train our model on both data types at once. To do this, we saw the need to create a common list of features that can be applied to any data input, allowing the model to train on both sources of data indiscriminately. As the Sood et. al. paper suggests, training on both sets of data has the potential to improve the resulting summaries of the model for each type of data separately, although the paper in question does not specify their results beyond the notion that they were promising in a preliminary examination.&lt;/p&gt;&lt;p&gt;The end goal for our system is illustrated below:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*YodqfIjCDfX5xJLfNG_JFQ.png&quot; /&gt;Pipeline for integrating different datasets with a common feature set into our model&lt;/figure&gt;&lt;p&gt;The blended colors represent the notion of common features, achieved through separate pre-processing and vectorizing of each data source but used in a single shared model.&lt;/p&gt;&lt;p&gt;To achieve this, we needed to do a major restructuring of our codebase, and it is unfortunately the case that a huge portion of our time this week was spent improving old code to make it more modular and compatible with these new requirements. What was once a single script to parse, process, vectorize, and train on a single dataset had to be broken apart into different modules for each of those tasks that could implement a common interface. In addition, with the growing number of options and tasks that had to be supported, we discovered it was necessary to entirely separate the concerns of processing text and handling configuration: to that end, we created a new, much more robust command-line interface and broke all other components into individual directories with as much code factoring as possible.&lt;/p&gt;&lt;p&gt;As a result of our design process and refactor, we currently have almost all of the infrastructure necessary for incorporating the chatlog data and training our model on all of the available data before evaluating on a single source. As we mentioned above, however, there were several challenges with parsing the chatlog data, namely the messy nature of the chats and the number of possible edge cases present in such a large dataset. Therefore, we are still in the process of finishing the parser component, but once it is complete we should be able to use both types of data in Advanced Model #2 and report on the impact that it makes. See our progress so far with this pipeline structure on our &lt;a href=&quot;https://github.com/viterbi-or-not-to-be/viterbi-or-not-to-be/tree/master/conversation&quot;&gt;GitHub repository&lt;/a&gt;!&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Through the addition of the preprocessing step, we have greatly improved our ROUGE scores and become competitive with the advanced model in the Sood et. al. paper. Here are the results of our advanced models, using all of the features we have discussed so far and with the preprocessing step:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*iDsZaXOhuHshbaFWXFlPvQ.png&quot; /&gt;Results of the three advanced model types&lt;/figure&gt;&lt;p&gt;These results are significantly better than our baseline, and we believe our model is generally pretty good at picking up on which sentences are important to keep! To more directly see the impact of preprocessing, we compared the results of the Naive Bayes model with and without preprocessing:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BBrr-Z2ilFTbK8xi-t2SPg.png&quot; /&gt;Comparison between our advanced model with preprocessing and without preprocessing&lt;/figure&gt;&lt;p&gt;The model without preprocessing does decently, but the preprocessing definitely contributes significantly to our advanced model performance. To show our progress since the baseline model, this compares the results of the Naive Bayes baseline models with those of our current Naive Bayes model:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*M_zctk4dPmVbmVHeHmRYYQ.png&quot; /&gt;Comparison between our advanced model and our baselines&lt;/figure&gt;&lt;p&gt;Both ROUGE-1 and ROUGE-2 have stepped up by several percentage points, but the most significant increase is seen in the ROUGE-L improvement. Finally, our model compared with the model in the Sood et. al. paper:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Ty7sqP2swRfdf1UGw7wb_g.png&quot; /&gt;Comparison between our advanced model and the Sood et. al. model&lt;/figure&gt;&lt;p&gt;As you can see, our ROUGE-L score is slightly lower but our ROUGE-1 and ROUGE-2 scores are higher! We’ve previously discussed the drawbacks of ROUGE―there is no definitively better type of ROUGE metric and ROUGE in general is not necessarily a reliable indicator of how good the generated summaries really are, so we are wary about quantifying our model’s performance in comparison to the Sood et. al. model’s performance based just on ROUGE scores. However, we haven’t been able to find any examples of the summaries generated by their model so this is all we have to go off of for now.&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;Example Summary and Analysis&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Because ROUGE provides relatively unreliable metrics for evaluation of our model’s summaries, we have also turned to human evaluation. One of the summaries that our model was able to generate based off an input email thread, using all of the preprocessing and extra features that we have built, is reproduced below in its original condition except for display-motivated truncation:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/0*BMVwYccbvULdQcwp.&quot; /&gt;Comparison between human annotated reference summary (left) and summary generated by our advanced model (right)&lt;/figure&gt;&lt;p&gt;This summary is fairly representative of the summaries that are being generated, and compared to the results we saw from our baseline models it is clearly doing better in terms of human evaluation. The sentences highlighted in green are those that are shared between the reference annotation and our system’s generated summary — interestingly, all but one of the sentences in the reference summary were successfully captured by our system. Therefore, reading through the summary generated by our system gives a strong impression of the topics that were discussed in the thread, and seemingly gives a human reader all the information that is needed.&lt;/p&gt;&lt;p&gt;However, there are certainly aspects of the current summaries produced by the model that are lacking. In the summary given above, all 6 sentences that were truncated for display purposes at the ellipsis and the four additional non-green sentences displayed were not included in the reference summary. This summary comes from a thread with only 31 sentences after preprocessing, meaning that while our model successfully captured all of the sentences marked as important by a human, it did so at the cost of incorporating an enormous percentage of unnecessary extra text that serves to make the summary less of a “summary” while adding relatively little content. To address this, we will need to figure out how to reward the model for producing more concise summaries, or to incorporate a “compression factor” that allows producing a summary with the k most relevant sentences for some value of the hyperparameter k. Another issue is highlighted in red above — while we added preprocessing to remove email signatures based on a set of heuristics, to avoid deleting important content we made the preprocessor act conservatively when uncertain, and as a result some signatures like in the example above made their way into the summaries. Although other features would ideally prevent these signatures from appearing in many cases, we will need to improve our preprocessing heuristics in order to target these kinds of medium-specific text examples before moving on to incorporate additional types of data.&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;To entirely finish Advanced Model #1, we would like to complete the process of incorporating chatlog data and then transition into work on Advanced Model #2 by continuing to explore and add conversation-specific features. We also want to address the excessive lengthiness problem we found in the generated summaries by doing something to limit the number of sentences the model is allowed to select for the extractive summary.&lt;/p&gt;&lt;p&gt;Beyond these immediate steps, we would love to be able to take a stab at abstractive summarization! It’s a really challenging but rewarding conversation summarization problem that we will need to put some more thought into to attempt. We’ve preliminarily determined that we can make an attempt using the extractive output from our current model along with some other contextual metadata from the conversation data (for example, authors of the chosen sentences), to get a start on an abstractive summary. In general, we think this will require more modeling of entity relationships and text generation.&lt;/p&gt;&lt;p&gt;Overall, we’re excited with what our model has been able to do so far and optimistic about what we’ll be able to achieve with Advanced Model #2, so stay tuned!&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=d7a06e892cdd&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 09 May 2018 06:33:15 +0000</pubDate>
</item>
<item>
	<title>Rajas Agashe &lt;br/&gt; Team Han Flying Solo: Blog 7</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5600014144802012716.post-8581531123022969204</guid>
	<link>https://nlpcapstonesemparse.blogspot.com/2018/05/blog-7.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;I've read through a lot of the data, to understand the data set and view the different types of error &lt;/span&gt;&lt;br /&gt;&lt;span&gt;cases. in general, most(⅔) of the data is just noise, meaning that a programmer won't be able to &lt;/span&gt;&lt;br /&gt;&lt;span&gt;generate the target code from the utterance. &lt;/span&gt;&lt;/div&gt;&lt;b id=&quot;docs-internal-guid-42510a76-41f6-9607-1678-1da3293c9502&quot; style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Error breakdown(whats consistently wrong). Rule based fixes.&lt;/span&gt;&lt;/div&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Not understanding functions versus fields&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;return func_debug; or func_x = …&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Fix &quot;Expression--&amp;gt;Expression___(___)&quot;, &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Expresion -&amp;gt;identifer&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;identifier-&amp;gt;classfields variables&lt;/span&gt;&lt;/div&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;&quot;Expression--&amp;gt;Expression___.___Nt_33&quot;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;If parent has parenthesis then allow nt_33 to generate functions otherwise fields ok&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Not able to initialize correctly&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;List y = new File&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;sriniclass_event = new StatisticGenerationEvent()&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt; text-indent: 36pt;&quot;&gt;&lt;span&gt;&quot;Expression--&amp;gt;Expression___Nt_68___Expression&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;Expression--&amp;gt;Primary&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;Primary--&amp;gt;IdentifierNT&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;IdentifierNT--&amp;gt;sriniclass_event&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;Nt_68--&amp;gt;=&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;Expression--&amp;gt;new___Creator&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;Creator--&amp;gt;CreatedName___Nt_37&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;CreatedName--&amp;gt;IdentifierNT&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;IdentifierNT--&amp;gt;StatisticGenerationEvent&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;Nt_37--&amp;gt;ClassCreatorRest&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;ClassCreatorRest--&amp;gt;Arguments&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-left: 36pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;            &quot;Arguments--&amp;gt;(___ExpressionList___)&quot;&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 11pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Generics incorrect and missing generics&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;List&amp;lt;List&amp;gt;  Map&amp;lt;Map, Map&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;List x&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;I want pivot now since adding all these rules doesn't seem interesting from a language perspective. I am considering finding a filtering heuristic to run on this dataset to get better quality utterances.&lt;/span&gt;</description>
	<pubDate>Tue, 08 May 2018 22:55:00 +0000</pubDate>
	<author>noreply@blogger.com (nlpcapstone)</author>
</item>
<item>
	<title>Pinyi Wang, Dawei Shen, Xukai Liu &lt;br/&gt; Team Overfit: #6 Milestone: Advanced model attempt #1</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-9203775015655831448.post-3361785683406757277</guid>
	<link>https://teamoverfit.blogspot.com/2018/05/6-milestone-advanced-model-attempt-1.html</link>
	<description>&lt;h2 style=&quot;height: 0px;&quot;&gt;&lt;span&gt;Team Overfit&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;Project repo: &lt;span style=&quot;font-size: 18.72px;&quot;&gt;&lt;a href=&quot;https://github.com/pinyiw/nlpcapstone-teamoverfit&quot;&gt;https://github.com/pinyiw/nlpcapstone-teamoverfit&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;Team members: Dawei Shen, Pinyi Wang, Xukai Liu&lt;/span&gt;&lt;/h4&gt;&lt;div style=&quot;text-align: start; text-indent: 0px;&quot;&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Blog Post: #6: 05/01/2018&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Social Media Predicts Stock Price (StartUp Mode)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;This week, we added more data source and have finer process of the data. We also convert &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;Keras model to Tensorflow for better future improvement.   &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Keras to TensorFlow&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;We updated our code from using Keras to Tensorflow which helps to do more improvement on model. For example, TensorFlow is a lower level library which allow us to have more control over the variables we used as the input and output. For example, if we want to try with more complicated input with adding the voerall market stock price and the competitors' stock prices, TensorFlow will be more helpful.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Add One More Target Company: Tesla&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;As there are too many Tweets that have tagged #Apple but are unrelated to the company Apple, we need to filter out such tweets. However, if we apply the model on the company Tesla, who's company name is uniquer than 'Apple' and has its products naming closer to its company name, the Tweets and news that have tagged #Tesla will contain much less noisy information and thus improve the prediction to its stock price.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Try Out Different Layers Structure to Tune LSTM&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul&gt;&lt;span id=&quot;docs-internal-guid-1d495372-1f45-7a06-476d-fd5b4661d619&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;Add the NASDAQ index to the input&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;The composition of the NASDAQ Composite is heavily weighted towards information technology companies. Therefore, company Apple’s and Tesla’s stock prices may be influenced by the Nasdaq index.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;Add a 'STAY' category as the output prediction of stock price&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;If the change of the stock price for the next day is within 1%, we will mark the stock price of that day as a ‘STAY’. Otherwise, we mark it as ‘UP’ or ‘DOWN’&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;Lemmatization &amp;amp; Stemming&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;Lemmatization and stemming help collect the same words with different tenses together, which reduce the total vocabulary size.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/span&gt;&lt;/ul&gt;&lt;div&gt;&lt;span id=&quot;docs-internal-guid-1d495372-1f45-7a06-476d-fd5b4661d619&quot;&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;&lt;b&gt;Update Of Evaluation Plan&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span id=&quot;docs-internal-guid-1d495372-1f45-7a06-476d-fd5b4661d619&quot;&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;&lt;b&gt;Results &amp;amp; Error Analysis&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;span id=&quot;docs-internal-guid-1d495372-1f45-7a06-476d-fd5b4661d619&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;After we have improved the model and the training process, the prediction accuracy for Apple will be above 85% if we choose '&lt;i&gt;+/-1% change of the stock price&lt;/i&gt;' as 'STAY'.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;The prediction accuracy for Apple will be above 60% if we choose '&lt;i&gt;+/-1% change of the stock price&lt;/i&gt;' as 'STAY'.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/span&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;span id=&quot;docs-internal-guid-1d495372-1f45-7a06-476d-fd5b4661d619&quot;&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;&lt;b&gt;What To Investigate For The Next Week&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;span id=&quot;docs-internal-guid-1d495372-1f45-7a06-476d-fd5b4661d619&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;Apply F1 scores. For the evaluation ,we would like to know:&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;The rate of stocks are marked 'UP/DOWN/STAY' that are predicted correctly as 'UP/DOWN/STAY' separately.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;The rate of stocks are marked 'UP/DOWN/STAY' that are predicted wrongly as 'UP/DOWN/STAY' separately.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;Add competitors' stock prices to the input&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/span&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 02 May 2018 05:53:00 +0000</pubDate>
	<author>noreply@blogger.com (Team Overfit)</author>
</item>
<item>
	<title>Pinyi Wang, Dawei Shen, Xukai Liu &lt;br/&gt; Team Overfit: #5 Milestone: Strawman/Baseline II</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-9203775015655831448.post-597849658553454254</guid>
	<link>https://teamoverfit.blogspot.com/2018/04/5-milestone-strawmanbaseline-ii.html</link>
	<description>&lt;h2 style=&quot;height: 0px;&quot;&gt;&lt;span&gt;Team Overfit&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;Project repo: &lt;span style=&quot;font-size: 18.72px;&quot;&gt;&lt;a href=&quot;https://github.com/pinyiw/nlpcapstone-teamoverfit&quot;&gt;https://github.com/pinyiw/nlpcapstone-teamoverfit&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;Team members: Dawei Shen, Pinyi Wang, Xukai Liu&lt;/span&gt;&lt;/h4&gt;&lt;div style=&quot;text-align: start; text-indent: 0px;&quot;&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Blog Post: #5: 04/24/2018&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Social Media Predicts Stock Price (StartUp Mode)&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;&lt;span id=&quot;docs-internal-guid-8a395488-fb3a-d9a7-cec2-8d3cb31f0a59&quot;&gt;&lt;span&gt;This week, we tried to use tf-idf and seq2vec to process news headlines as input to our LSTM &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;model to predict UP/DOWN for APPLE stock price.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;&lt;b&gt;Data Preprocessing&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Crawling historical news headlines from Twitter&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Categorize tweets with date and correlated stock price&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Cleanup unrelated data&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Map vocabulary to index with removing words that appear less than 3 times in the tweet news corpus.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Seq2One with TF-IDF&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;TF-IDF&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Correlate word frequencies with price changes (convert words into normalized frequency count vector)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Seq2One&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Correlate average word embeddings with price changes (convert words into normalized embedding vector)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Bidirectional RNN&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Enhance the performance by knowing before and after prices&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Evaluation&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Accuracy on predicting Up or Down&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Accuracy on predicting Stock Price (TODO)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Result&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;TF-IDF: 60.7% accuracy predictin UP/DOWN on test set with 273 total data points and 9/1 train-test split&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Seq2Vec: 53.6% accuracy predicting UP/DOWN on test set with 273 total data points and 9/1 train-test split&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Error Analysis&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;b&gt;Things that may impair the precision of prediction&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Words with high frequency but have low effect on stock prices:&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;A, is, of, for, the&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Tweets talking about fruit &lt;i&gt;apple&lt;/i&gt; instead of the company&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;Tweets news that have high frequency but low effect on stock prices and news that may have high effect on stock prices but with low frequencies&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Losing information of each single tweet as we have combined all tweets in a day together to form a word frequency vector and do the prediction&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;&lt;b&gt;Things that could be done to improve the performance&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Add the overall market stock price as part of the input because it usually also has big impact on a single companies stock price.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Crawl more data for more companies and longer duration&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Add financial&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Add the competitor companies stock prices and tweets news as part of the input.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span id=&quot;docs-internal-guid-8a395488-fb3c-6f01-c575-279c6f3d6421&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 25 Apr 2018 05:20:00 +0000</pubDate>
	<author>noreply@blogger.com (Team Overfit)</author>
</item>
<item>
	<title>Pinyi Wang, Dawei Shen, Xukai Liu &lt;br/&gt; Team Overfit: #4 Milestone: Strawman/Baseline I</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-9203775015655831448.post-1250926726356516395</guid>
	<link>https://teamoverfit.blogspot.com/2018/04/4-milestone-strawmanbaseline-i.html</link>
	<description>&lt;h2 style=&quot;height: 0px;&quot;&gt;&lt;span&gt;Team Overfit&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;Project repo: &lt;span style=&quot;font-size: 18.72px;&quot;&gt;&lt;a href=&quot;https://github.com/pinyiw/nlpcapstone-teamoverfit&quot;&gt;https://github.com/pinyiw/nlpcapstone-teamoverfit&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;Team members: Dawei Shen, Pinyi Wang, Xukai Liu&lt;/span&gt;&lt;/h4&gt;&lt;div style=&quot;text-align: start; text-indent: 0px;&quot;&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Blog Post: #4: 04/17/2018&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Social Media Predicts Stock Price (StartUp Mode)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;This week, we experimented with crawling data by querying from Twitter website, but we had some struggles finding the meaningful data set. Firstly, the Twitter API does not support fetching tweets prior than 7 days, so we have to write bash scripts and use a crawler to strip data from website, which is comparatively slower.&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;docs-internal-guid-945a652a-d716-7ba2-4653-bdd5ec706d01&quot;&gt;&lt;a href=&quot;https://github.com/Jefferson-Henrique/GetOldTweets-python&quot;&gt;&lt;span&gt;https://github.com/Jefferson-Henrique/GetOldTweets-python&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;We tried to query keywords like Apple, iPhone, iPad. Lots of tweets we got are not in English, so we used language detection tools to filter out tweets in other languages. Unfortunately, there are too much giveaway and advertisement flooding on the platform. Some examples are:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&quot;Microsoft planning to launch Surface Pro 6 in first quarter of 2017&quot;&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&quot;KFire TV Giveaway: Win a Microsoft Bluetooth Mouse. http://kodifiretvstick.com&quot;&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&quot;Microsoft Releases The 'Studio', Its First Desktop Computer&quot;&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span&gt;&quot;Like - free microsoft points world http://freemicrosoftpointsworld.weebly.com/&quot;&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;Therefore, for out strawman model #1 we decide to use the relative news headlines under twitter search query.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;We searched companies' names like Google, Microsoft, Tesla to find relative new headlines and use unigram (bag of words) to put it in a decision tree model with random forest mechanism to predict the price go UP or DOWN. We had mixed results using this model. This is just our first attempt to see whether the twitter data is useful to predict the movement of future stock prices.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;AAPL GOOG MSFT AMZN&lt;/span&gt;&lt;br /&gt;&lt;span&gt;53.66% 58.53% 56.10% 37.50%&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span&gt;Next week, we'll try to use deep neural network as predictive model and expand our input to the user feedback of the product from general users.&lt;/span&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 18 Apr 2018 04:47:00 +0000</pubDate>
	<author>noreply@blogger.com (Team Overfit)</author>
</item>
<item>
	<title>Pinyi Wang, Dawei Shen, Xukai Liu &lt;br/&gt; Team Overfit: #3 Project Proposal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-9203775015655831448.post-5878905571398539101</guid>
	<link>https://teamoverfit.blogspot.com/2018/04/3-project-proposal.html</link>
	<description>&lt;h2 style=&quot;height: 0px;&quot;&gt;&lt;span&gt;Team Overfit&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;Project repo: &lt;span style=&quot;font-size: 18.72px;&quot;&gt;&lt;a href=&quot;https://github.com/pinyiw/nlpcapstone-teamoverfit&quot;&gt;https://github.com/pinyiw/nlpcapstone-teamoverfit&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;Team members: Dawei Shen, Pinyi Wang, Xukai Liu&lt;/span&gt;&lt;/h4&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: start; text-indent: 0px;&quot;&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;&lt;div&gt;&lt;span&gt;&lt;b&gt;Blog Post: #3: 04/10/2018&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Social Media Predicts Stock Price (StartUp Mode)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b id=&quot;docs-internal-guid-213a19db-b353-3e4c-1df6-5dd289daeb8b&quot; style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;There are vast amount of new information related to companies listed on the stock market appears instantly, with immediate impact on stock prices. Our project is for monitoring those text on the social media platform and extract the key information that have impact on the stock prices and predict its future.&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span&gt;Background and Project objectives &lt;/span&gt;&lt;/div&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;a href=&quot;https://www.investopedia.com/terms/s/stockmarket.asp&quot;&gt;Stock Market&lt;/a&gt; refers to the collection of markets and exchanges where the issuing and trading of equities, bonds and other sorts of securities takes place.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Social media, such as Twitter, often reflects how people think about a company and therefore can be used as an indicator of the changes of stock price in the near future.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Traditionally, analytics use statistical model built on past stock prices and recent news to forecast stock prices. We would like apply Machine Learning and Natural Language Processing models on social media to see if it has enough information for us to make good prediction of future stock price.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;/ul&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;b&gt;Proposed methodologies&lt;/b&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;b&gt;&lt;span&gt;Dataset:&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;background-color: white; color: black; vertical-align: baseline; white-space: pre;&quot;&gt;Twitter data: &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #1155cc; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;a href=&quot;https://developer.twitter.com/en/docs&quot;&gt;https://developer.twitter.com/en/docs&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Preprocess twitter data:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Tokenization&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Stemming&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Lemmatization&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;background-color: white; color: black; vertical-align: baseline; white-space: pre;&quot;&gt;Bloomberg financial news dataset: &lt;/span&gt;&lt;span style=&quot;background-color: white; color: #1155cc; vertical-align: baseline; white-space: pre;&quot;&gt;&lt;a href=&quot;https://github.com/philipperemy/financial-news-dataset&quot;&gt;https://github.com/philipperemy/financial-news-dataset&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;span&gt;&lt;b&gt;Minimal viable action plan&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;Forecast companies’ stock price changes (UP, DOWN, STAY) &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;b&gt;&lt;span&gt;Model&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;N-gram with appropriate smoothing as baseline&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;Use RNN/LSTM/GRU as model&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;&lt;span&gt;User Interface&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;Command line REPL&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;span&gt;&lt;b&gt;Stretch goals&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;We could implement LSTM/GRU model to extract important information from the text in the preprocess&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;Forecast the approximate future stock price for a company given a future date&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;Auto trader bot that can take streaming tweets from twitter api and update the model prediction &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;Fusion with 8-K reports to elevate the accuracy&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;span&gt;&lt;b&gt;Evaluation plan&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;F-1 score for (UP/DOWN)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Loss functions for comparing predictions and expectations.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Evaluate on time required to do a prediction.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;&lt;span&gt;&lt;b style=&quot;white-space: pre;&quot;&gt;Reference&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;background-color: white; color: black; vertical-align: baseline; white-space: pre;&quot;&gt;On the Importance of Text Analysis for Stock Price Prediction: &lt;/span&gt;&lt;a href=&quot;https://nlp.stanford.edu/pubs/lrec2014-stock.pdf&quot;&gt;&lt;span style=&quot;background-color: white; color: #1155cc; vertical-align: baseline; white-space: pre;&quot;&gt;https://nlp.stanford.edu/pubs/lrec2014-stock.pdf&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span style=&quot;color: black; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Stock Trend Prediction Using News Sentiment Analysis: &lt;/span&gt;&lt;span style=&quot;color: #1155cc; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;a href=&quot;https://arxiv.org/pdf/1607.01958.pdf&quot;&gt;https://arxiv.org/pdf/1607.01958.pdf&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;font-family: times;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 11 Apr 2018 06:10:00 +0000</pubDate>
	<author>noreply@blogger.com (Team Overfit)</author>
</item>

</channel>
</rss>
